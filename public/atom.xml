<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog.XDite.net]]></title>
  <link href="http://blog.xdite.net/atom.xml" rel="self"/>
  <link href="http://blog.xdite.net/"/>
  <updated>2013-05-20T00:16:13+08:00</updated>
  <id>http://blog.xdite.net/</id>
  <author>
    <name><![CDATA[xdite]]></name>
    <email><![CDATA[xdite@about.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[One assertion per test & DAMP not DRY]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/19/one-assertion-per-test/"/>
    <updated>2013-05-19T22:57:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/19/one-assertion-per-test</id>
    <content type="html"><![CDATA[<p>TL; DR : 寫測試兩個鐵律：一次只測一件事情、不要自作聰明幫測試碼 DRY。</p>

<p>最近跟著朋友 <a href="http://twitter.com/knwang">Kevin Wang</a>，現 <a href="http://teahleaf.com">Tealeaf</a> (Ruby on Rails 線上教學公司) 教師，前 <a href="http://hashrocket.com">Hashrocket</a> 工程師，學習寫正統的測試。</p>

<p>找老師直接學下來，果然比自己抄一抄外面的 code ，寫出湊合測試，果然神速許多。</p>

<p>以往寫測試時最讓人迷惑的就是，如何才能測到恰到好處，一段程式碼幾十行，中間有的動作根本不知道要怎麼測，或者是寫了一大堆測試，還是會在某個執行點壞掉，結果測試碼寫到跟程式碼打架。或者是 case 很多，測了 一 在 二 爆炸，測了二，在三爆炸…寫測試寫到火大。</p>

<p>最近才開始領悟到要同時把「程式碼」和「測試代碼」寫好，其實真的很簡單。只是以前沒有機會「好好學」。</p>

<p>其實總歸來說：寫測試只要抓住兩個原則：</p>

<ul>
<li>「One assertion per test」</li>
<li>「DAMP not DRY」</li>
</ul>


<p>就可以解決 80% 的問題。</p>

<p>只是我以前從來就不知道這兩條原則不是寫好玩的，而是寫測試的「鐵律」。</p>

<p>只要你嚴格守住第一條線「One assertion per test」，你的程式碼就會變得非常乾淨。守住第二條線「DAMP not DRY」，你的測試碼就會變得非常好維護。</p>

<p>這兩條用得很熟，你寫測試就再也不會迷惑，到底應該怎樣寫才算「測得對」。</p>

<h2>One assertion per test</h2>

<p>One assertion per test 講的其實是：一個測試必須只驗證一件事。這是什麼意思呢？</p>

<p>這是指就算是你的程式碼只有下面幾行的話</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def show
</span><span class='line'>  @post = Post.find(params[:id])
</span><span class='line'>  @comments = @post.comments 
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>你也必須這樣拆開測</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describle "GET show" do 
</span><span class='line'>  let(:post) { Fabricate(:post)} 
</span><span class='line'>  let(:comment) { Fabricate(:comment, :post =&gt; post) } 
</span><span class='line'>  
</span><span class='line'>  it "assgin @post variable" do 
</span><span class='line'>    get :show, :id =&gt; post
</span><span class='line'>    assigns(:post).should == post
</span><span class='line'>  nd
</span><span class='line'>  
</span><span class='line'>  it "assigns @comments to @post.comments  do 
</span><span class='line'>    get :show, :id =&gt; post
</span><span class='line'>    assigns(:comments).should == [comment]
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  it "render show's view" do 
</span><span class='line'>    get :show, :id =&gt; post
</span><span class='line'>    response.should render_tempate :show
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>而不是擠在一起。如同下面這個測試。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describle "GET show" do 
</span><span class='line'>  let(:post) = Fabricate(:post)
</span><span class='line'>  let(:comment) = Fabricate(:comment, :post =&gt; post)
</span><span class='line'>  
</span><span class='line'>  it "assgin @post variable and assigns @comments to @post.comments and render show's view " do 
</span><span class='line'>    get :show, :id =&gt; post
</span><span class='line'>    assigns(:post).should == post
</span><span class='line'>    assigns(:comments).should == [comment]
</span><span class='line'>    response.should render_tempate :show
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>為什麼守著這個原則這麼重要呢？因為當你在寫類似以下程式碼時</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def create
</span><span class='line'>
</span><span class='line'>  @post = Post.new(params[:post])
</span><span class='line'>  
</span><span class='line'>  if @post.save
</span><span class='line'>    urls = URI.extract(content)
</span><span class='line'>    urls = urls.uniq 
</span><span class='line'>    urls.each do |url|
</span><span class='line'>      link = @post.links.build(:url =&gt; url)
</span><span class='line'>      link.save
</span><span class='line'>    end
</span><span class='line'>    redirect_to posts_path
</span><span class='line'>  else
</span><span class='line'>    render :new
</span><span class='line'>  end
</span><span class='line'>      
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>就會下意識的改寫成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def create
</span><span class='line'>
</span><span class='line'>  @post = Post.new(params[:post])
</span><span class='line'>  
</span><span class='line'>  if @post.save
</span><span class='line'>  @post.extract_links!
</span><span class='line'>    redirect_to posts_path
</span><span class='line'>  else
</span><span class='line'>    render :new
</span><span class='line'>  end
</span><span class='line'>      
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>針對 @post.extrat_links 再寫一個 unit test，然後在 controller test 中 mock 掉。</p>

<p>一旦不這樣拆，你就會發現「非常難遵守」「One assertion per test」這條定律，更不用說也很難測。當一旦習慣寫 code 拆 method 時，你就會發現程式碼其實會一天一天更乾淨&#8230;.</p>

<p>而且你會猛然發現，以前那些「很難寫測試的code」，都是那些不喜歡拆 method 拆 class 的 code …</p>

<h2>「DAMP not DRY」</h2>

<p><a href="http://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">DAMP not DRY</a></p>

<ul>
<li>DAMP 是指 Descriptive And Meaningful Phrases</li>
<li>DRY 是指 Don&#8217;t Repeat Yourself</li>
</ul>


<p>這是什麼意思呢？</p>

<p>我發現大部分的測試很難改是因為，程式設計師寫 code 寫的最後的一個壞習慣 DRY。</p>

<p>等等？DRY 不是一個好原則嗎？</p>

<p>DRY 在寫程式時是一個很重要的好原則沒錯，它的作用是讓程式儘量好讀好（給人）維護。所以程式師設計在經過良好的寫程式訓練之後，下意識習慣性的在寫任何 code 時都給他 DRY 一下。</p>

<p>很可能就會寫出這樣的測試碼：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Post do 
</span><span class='line'>  before do 
</span><span class='line'>    let(:alice) { user = Fabricate(:user) } 
</span><span class='line'>    let(:bob) { user = Fabricate(:user) } 
</span><span class='line'>    let(:post) { post = Fabricate(:post, :user =&gt; alice ) }    
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  it "#xxx" do 
</span><span class='line'>     …..
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  it "#yyy" do 
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  it "#zzz" do 
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>這，就，慘，了。</p>

<p>為什麼呢？在剛開始第一次寫這些 test case 的時候，你可能覺得這沒什麼問題，測試都會通過…不過當一個月之後，你的老闆叫你改一些功能的時候，比如說改 <code>#xxx</code> 好了，你可能要換掉 alice 這個 sample。這就慘了，一改下去 <code>#xxx</code> 是綠燈了，<code>#yyy</code> 與 <code>#zzz</code> 卻紅燈了。</p>

<p>這時候你就會很幹&#8230;.要去重寫 <code>#yyy</code> 與 <code>#zzz</code> 的 test，但是改著改著你卻發現要讓 <code>#yyy</code> 與 <code>#zzz</code>綠燈，其實有時候可能要連原先 <code>#yyy</code> 與 <code>#zzz</code> 的測試碼也要重寫…</p>

<p>然後你就會相當抓狂：改兩行，然後卻要修 60 行，越寫覺得寫程式碼和寫測試碼的邊界到底在哪裡？好像只有多做工&#8230;.</p>

<p>DAMP 的原則是要你，在寫測試時 CASE 寫的越清楚越好，甚至「多行重複」也沒有關係。也就是以上的程式碼我們應該改成：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Post do 
</span><span class='line'>  it "#xxx" do 
</span><span class='line'>    let(:alice) { user = Fabricate(:user) } 
</span><span class='line'>    let(:bob) { user = Fabricate(:user) } 
</span><span class='line'>    let(:post) { post = Fabricate(:post, :user =&gt; alice ) }    
</span><span class='line'>    …..
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  it "#yyy" do 
</span><span class='line'>    let(:alice) { user = Fabricate(:user) } 
</span><span class='line'>    let(:bob) { user = Fabricate(:user) } 
</span><span class='line'>    let(:post) { post = Fabricate(:post, :user =&gt; alice ) }  
</span><span class='line'>    …..  
</span><span class='line'>  end
</span><span class='line'>  
</span><span class='line'>  it "#zzz" do 
</span><span class='line'>    let(:alice) { user = Fabricate(:user) } 
</span><span class='line'>    let(:bob) { user = Fabricate(:user) } 
</span><span class='line'>    let(:post) { post = Fabricate(:post, :user =&gt; alice ) }    
</span><span class='line'>    …..
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>它的原則是：開發者要儘量讓寫的每一個測試「環境獨立」。不要被其他測試環境變數的改變，也被影響到。</p>

<p>而且用 before，容易隱藏一些該被測試的 host，不容易 debug。這也是另外一個需要小心的地方&#8230;</p>

<hr>


<p>只要這兩條線你守得非常嚴，程式碼和測試碼就會越來越有水準。</p>

<p>至於防守警鐘在哪裡？</p>

<ul>
<li><p>只要你在 it &#8220;xxxx …. and yyyy&#8221; 裡面提到 <code>and</code> 這個字，基本上就表示你在測兩件事。你應該開個 context 拆開繼續做成兩個 test，或者再拆一個 it 出來再寫一個 test。</p></li>
<li><p>只要你想要在 describer 裡面寫 <code>before</code>，可能就要小心你又在不小心 DRY 過頭破壞測試的獨立環境了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linode 被 Hack 事件始末]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/08/linode-hacked-htp/"/>
    <updated>2013-05-08T00:49:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/08/linode-hacked-htp</id>
    <content type="html"><![CDATA[<p>TL; DR 版本：Linode 是躺著中槍的路人</p>

<p>上個月，Linode 被打下來，洩漏了一堆資訊。逼得很多人不得不換卡和換密碼。幾個小時前，在 HackerNews 的一篇文章揭露 Linode 其實是路邊的那個倒楣鬼，人家不是要揍他，而是揍他的客戶&#8230;</p>

<p>以下內容是基於 <a href="https://news.ycombinator.com/item?id=5667027">HN 上的一篇懶人包</a>翻譯，然後加上<a href="http://straylig.ht/zines/HTP5/0x02_Linode.txt">HTP 雜誌原文</a>裡的資訊。</p>

<p>故事是這樣的：</p>

<p>有個駭客組織叫 HTP，最近有個匿名組織假冒成另一個組織 &#8220;ac1db1tch3z&#8221; 想要挖他們的底（去挖 HTP 的 botnet）。HTP 非常不爽想要報復，後來他們查到這個匿名組織在用 SwiftIRC 這個 IRC 服務在聯絡。而 SwiftIRC 的 nameserver 放在 Linode..。</p>

<p>所以 HTP 想要把 Linode 打下來，hack 進 SwitftIRC 放後門，然後報復回去。</p>

<p>他們一開始直接打 Linode，結果 1day exploit 被 Linode 防下來了。但是，Linode 的域名註冊商 name.com 被打下來了。所以他們的計畫改成弄一個 transparent proxy，打算從中間攔下 Linode 的帳號密碼&#8230;。</p>

<p>=== 題外話 ===</p>

<p>不只 name.com 被打下來了。 Xinnet, MelbourneIT, and Moniker 也被打下來了。
這一波總共有 550 萬的 domain 被打下來..no kidding</p>

<p>=== 題外話結束 ===</p>

<p>本來計畫是這樣的，但是他們發現了一個更棒的洞，直接打下了 Linode &#8230;</p>

<p>這當然很 high 啦。他們當然直接拿下 SwiftIRC 開始種後門。更精彩的是，因為不少站台也放在 Linode，中獎的名單還有： Nmap, Nagios, SQLite, OSTicket,    <br/>
Phusion Passenger (modrails), Mono Project, Prey Project, Pastie, Sucuri, Hak5, Pwnie Express, Puppet, and oauth.</p>

<p>（都是一些超重要的站&#8230;）</p>

<p>但是，HTP 不知道的是，HTP 內部被 FBI 滲透了..因為 nmap.org 是個非常重要的站台（security scanner）。於是 Linode 很快就被 FBI 警告了 nmap.org 被打下來了。</p>

<p>於是，Linode 上其他站被 HTP 打下來的事，很快的也被知道了。這讓 HTP 的報復計畫來不及實現&#8230;於是 HTP 決定警告 Linode 至少在 5/1 不准講出去，否則 HTP 就會散佈這些他們拿到的這些敏感資訊（包括客戶資料以及信用卡資料）。如果 Linode 安靜的話，HTP 就會遵守約定刪掉拿到的這些東西。</p>

<p>=== 題外話 ===</p>

<p>敏感資訊包括 : 159000 + 信用卡資料，使用這名稱, $5 (我不知道是多少數量) 筆加密過的密碼，LiSH 使用者名稱，LiSH 密碼 「明碼版」 。還有 Linode 雇員 Login 帳號。</p>

<p>=== 題外話結束 ===</p>

<p>因為 HTP 打 Linode 本來就不是為了拿這些資料，而是想要打仇家。所以他們認為開給 Linode 的 Offer 已經算不錯了。如果他們不聲張，基本上就等於什麼事都沒發生。</p>

<p>但是！！Linode 還是公開了被打下的這件事（因為他們也被 FBI 逼著要公開，FBI 很明顯的不信任 HTP 會守約）。HTP 知道 Linode 其實被逼到一個很難自處的位置，於是也跟 Linode 達成了另一個協議，只要 Linode 在公告上說，經過分析之後發現打下他們的是 HTP。HTP 就會同意刪除當初拿到的這些資料&#8230;.（很多 Hacker 其實只是想留名）</p>

<p>HTP 被這樣偷搞很不爽，於是他們就在查到底誰是 FBI 的內鬼。最近終於找到了，他們打進了這個內鬼的電腦，並且打開了 webcam。正好清楚拍到了 FBI 正在對某個 HTP 成員背後下指導棋，然後這個人就被踢出了組織&#8230;</p>

<p>這是到目前的故事。不過這是 HTP 單方面的故事，信不信就隨你了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4: New Feature, Better Syntax]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/rails4-new-feature/"/>
    <updated>2013-05-04T15:28:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/rails4-new-feature</id>
    <content type="html"><![CDATA[<p>TL;DR : Rails 4 是一個溫和加強版的 Rails3，而且贈送了很多酷炫 feature，適合進場</p>

<p>上個月花了一點時間直接衝了 Rails 4.0beta1，利用 upgrade project 去熟悉整個 Rails4 新的架構。</p>

<p>若要我形容對於 Rails4 這次升級的感想的話，我會總結為兩句話 <code>New Feature, Better Syntax</code>。</p>

<p>相較於 Rails 2 -> Rails 3 幾乎是個毀天滅地的重新大改寫（i.e. 不管是 Rails 本身，還是使用 Rails 開發的 project），Rails 3 -> Rails 4 的升級及變更內容顯得溫和許多。</p>

<h2>Better Syntax</h2>

<p>Rails 4 這次的改進，許多都是吵了多年以來的折衷方案、或者是許多開發者對如何設計，始終各自有 strong opinion 的主題，都找到 best practices 而被一槌定音了。或者是一些一直以來大家覺得老是被逼著這樣寫，非常智障的設計，也都被改掉了…</p>

<h3>Routing</h3>

<ul>
<li>讓 Routing 更安全：新增了以 http verb 為 syntax 的寫法，如 get/post</li>
<li>支援 Rouring concern: 如果要幫不同的 resources 加上如同 :comments 這樣的 nested_resources 就不用一直再重複貼上</li>
</ul>


<h3>ActiveRecord</h3>

<ul>
<li>強迫 scope 的寫法要全面改成 proc / lambda：避免 eager-evaluated 出現的問題。</li>
<li>Relation#not：以往要寫出 not 的查詢條件，寫法讓人哭笑不得。</li>
<li>Relation#none：以往撈不出集合，是 nil，要回傳 [] 空集合要自己作..</li>
<li>Relation#pluck：可以輕鬆只摘出某些欄位，以及要自己手下 select…</li>
<li>Relation#unscope：避免 default_scope + order 產生的排序問題。（因為下 except 無法閃過去）</li>
<li><code>update</code> &amp; <code>update_columns</code>：update 會觸發 callbacks, update_column 不會，但是 update_column 無法送多個 params，於是必須只好用 sneaky-save 這個 solution 繞過。現在 4 直接支援 update_columns</li>
</ul>


<h3>ActionController</h3>

<ul>
<li>before_filter 更名為 before_action：就是正名&#8230;</li>
<li><code>respond_to do |format|</code> 拿掉 xml 以 json 取代：2013 年了，沒人再拿 xml 當 default API&#8230;</li>
</ul>


<h3>Security</h3>

<ul>
<li>拿掉 attr_accessible，改用 strong_paraments：去年 <a href="http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security/">Github 被打下</a>的事情鬧很大，Rails 的安全策略重新被檢討，於是最後社群討論出採用 strong_parameters 得這個 best practices。</li>
</ul>


<h3>Other</h3>

<ul>
<li>砍掉 <code>public/index.html</code> : 砍掉愚蠢的 publc/index.html，以往教 Rails 初學者第一課就是記得砍掉這個預設檔案，不然寫的東西都會看不到</li>
<li>add_flash_type ：以往警告訊息只有 [:notice , :alert, :error ] 三種類型，但是自從有 <a href="http://twitter.github.io/bootstrap/">bootstrap</a> 之後。大家習慣使用的是 [:notice , :warning, :error]。要套版時要一直手加 <code>, :flash =&gt; { :warning =&gt; "Oh no!" }</code> 是很智障的事，Rails4 開放自定義 flash types。(P.S. 這是我提的&#8230;)</li>
<li>mem_cache_store 換成 dalli：自從 1.9 出了之後，原先的 :mem_cache_store （memcache-client）會撞到 utf8 問題，於是大家都改用 dalli 作為 backend cache，Rails 4 的 :mem_cache_store 預設將改為 dalli。</li>
</ul>


<h2>New Feature</h2>

<ul>
<li>Model Concern / Controller Cern: 重複用到的 method使用 Concern 複用</li>
<li><a href="https://speakerdeck.com/xdite/turbolinks">Turboklinks</a> : 無痛自動 pjax。pjax 不難，只要你用 Rails4 …</li>
<li><a href="http://blog.xdite.net/posts/2012/09/02/cache-digest-new-strategy/">Cache Digest</a>: 採用 Russian Doll Cache Strategy，智能 cache 設計，以前多層 partial cache 的問題讓大家實在很頭大。</li>
<li>HTML5 input form helpers: 現在是 HTML5 的時代，開發時自然會使用很多 js plugin，如calendar plugin，但用傳統的 form object 去產生這些 field 實在很痛苦。Rails4 內建了 HTML5 input form helpers。</li>
<li>採用 jbuilder 產生 json : 生 json 可以採用類似生 rss 的方式寫 builder，真是驚訝這個 feature 現在才出現 ….</li>
</ul>


<h2>結論</h2>

<p>學 Rails4 最快的方式不是看書，因為總體而言，這次的升級並不是什麼大破壞。改良的 syntax 和好用的新 feature。反而應該會減少不少平常開發上的負擔。而學習 Rails4 最好的方式就是用勇敢在現有的 project 上，大方的開一個 rails4 branch 下去練習升。</p>

<p>不用花很多時間你就能感受到 Rails4 新 feature 帶來給你的好處…</p>

<p>// 警告：以上建議只針對 Senior Rails Developer。目前還有一些 gem 沒有 Rails4 版本。所以 project 升級有時候會遇到必須要自己 fork gem「手動升級/Hack」的狀況，不熟包 gem 者勿輕易嘗試。</p>

<p>這次內建的一些 feature，其實都還蠻有意思的，也許將來還會挑幾篇特別再寫幾篇文章&#8230;</p>

<h2>資源</h2>

<ul>
<li><a href="http://www.upgradingtorails4.com/">http://www.upgradingtorails4.com/</a></li>
<li><a href="http://blog.wyeworks.com/2012/11/13/rails-4-compilation-links/">http://blog.wyeworks.com/2012/11/13/rails-4-compilation-links/</a></li>
<li><a href="http://blog.remarkablelabs.com/2012/11/rails-4-countdown-to-2013">http://blog.remarkablelabs.com/2012/11/rails-4-countdown-to-2013</a></li>
<li><a href="http://www.edgerails.info/">http://www.edgerails.info/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rocodev 的技術部落格上線了]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/my-new-dev-blog/"/>
    <updated>2013-05-04T13:28:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/my-new-dev-blog</id>
    <content type="html"><![CDATA[<p>以後關於 Web 開發技術的東西，我會同步或 優先貼在 <a href="http://rocodev.com">Rocodev</a> 的 <a href="http://blog.rocodev.com/">官方 Blog</a> 裡面。</p>

<p>裡面除了我的技術文章之外，也會有我們優秀同事所寫的一些技術文章，如 <a href="http://blog.rocodev.com/posts/8-sublime-text-2-packages-for-rails">Sublime Text 2 Packages for Rails</a></p>

<p>歡迎訂閱！ <a href="http://feeds.feedburner.com/rocodev">http://feeds.feedburner.com/rocodev</a></p>

<p>P.S. Rocodev Blog 裡的文章不一定會 100% 與這裡的 Blog 文章 100% sync。</p>

<p>如 <a href="http://blog.rocodev.com/posts/11-dont-import-compass">SCSS 開發原則：禁用 @import &#8216;compass&#8217;;</a> 這篇我就沒有打算貼過來，所以建議各位兩邊都訂…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade 到 Rails4 的一些感想]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/upgrade-to-rails4/"/>
    <updated>2013-05-04T13:27:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/upgrade-to-rails4</id>
    <content type="html"><![CDATA[<p><img src="http://www.upgradingtorails4.com/ipad_sized.jpg" alt="img" /></p>

<p>Rails4 在前天的 <a href="http://www.railsconf.com/">RailsConf 2013</a> 釋出 <a href="http://weblog.rubyonrails.org/2013/5/1/Rails-4-0-release-candidate-1/">Rails 4.0 RC1</a> 了，這也表示大家應該可以進場了。</p>

<p>上個月在 Rails 4.0 beta1 時為了練手感，把手上的一個中小 production 專案，也上了 rails4 branch。</p>

<p>大概有幾個感想：</p>

<ul>
<li><p><a href="http://www.upgradingtorails4.com/">Upgrading to Rails4</a> 這本書強烈建議要買，才 $15 USD，可以節省你不少 debug 時間。</p></li>
<li><p>升 Rails4 建議不只開 branch，也用 rvm 開一個 gemset 出來作，因為 gem dependency 變更蠻多的。</p></li>
<li><p><a href="https://github.com/alindeman/rails4_upgrade">rails4_upgrade</a> 要裝。這個 gem 蠻好用的..可以幫你掃 dependency 問題。事實上 Rails3 升 Rails4 最討厭的是 gem dependency tree，因為 Rails 3 已經出太久了（幾乎快兩年了吧)，很多 Gemfile 都強綁定 3 ，所以升 Gemfile 時會出現很多問題&#8230;</p></li>
<li><p>major gem，如 simple_form, devise, 幾乎都有 beta1 版，裝了就保證可以動。小的 gem 也幾乎都有 rails4 branch 可以 hotfix。(起碼我在 beta1 進場時遇到的問題就幾乎都有解，所以在 rc1 的狀況應該會更好)</p></li>
<li><p>這次 Rails4 的改動，我個人的感想會是 Rails3 的 New Feature, Better syntax Version。如果平常 code 都寫的蠻漂亮（接口和封裝乾淨）的話，升級應該是沒有太痛才對。唯一讓人很煩的就是 gem dependency 解不完，還有牽扯到 scope 與 query 的部份幾乎都要重寫..:/ （目前是都還跳 warning 而已，但真要清 warning，如果 model 裡面 condition 很多，真的會清到手快斷&#8230;）</p></li>
<li><p>有關於 New Feature 與 Better syntax 這個議題，我應該週末會寫一篇出來..</p></li>
<li><p>Rails project 的本體內容物是沒有改動太大，但大家拿來 build gem 的 internal API 改不少，這也難怪 Jose Valim 這一兩天也同步釋出了 <a href="http://pragprog.com/book/jvrails2/crafting-rails-applications">Crafting Rails Applications (2nd edition): Expert Practices for Everyday Rails Development</a> 第二版的 beta。我這幾天改 gem 要升 Rails4 也是中了一堆 api 變更的地雷…</p></li>
<li><p>會逼大家都改 gem 的原因是因為是，連 migration api 都改了，所以只要提供產生 migration 的 gem 通通會逼要升 Rails4，真是個好招 -_- （連我只有兩個 commit 的 AutoFacebook gem 也不能倖免。解法在<a href="https://github.com/xdite/auto-facebook/commit/2e21a3fd1884c6eec7856b849d811b1d9b168502">這裡</a> ）</p></li>
<li><p>Obie Fernandez 前天也宣布了 Rails 聖經 <a href="https://leanpub.com/tr4w">The Rails 4 Way</a>開始 beta。值得注意的是他這次是使用 <a href="leanpub.com">Leanpub</a> 釋出書籍的 beta，而非走 <a href="http://www.informit.com/">Informit</a> 的 RoughCut 版本。</p></li>
<li><p>為什麼我有時間測這些東西？好問題，我也不知道…明明最近就忙到快死了&#8230;orz</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Helper 與 Bootstrappers 開始支援 Rails 4]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/bootstrap-helper-yu-bootstrappers-kai-shi-zhi-yuan-rails-4/"/>
    <updated>2013-05-04T13:24:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/bootstrap-helper-yu-bootstrappers-kai-shi-zhi-yuan-rails-4</id>
    <content type="html"><![CDATA[<p>我寫的兩隻 gem <a href="github.com/xdite/bootstrap-helper">bootstrap-helper</a> 與 <a href="https://github.com/xdite/bootstrappers">boostrappers</a> 目前都釋出 Rails4 版本了。</p>

<ul>
<li>gem install bootstrap_helper -v 4.2.2.1</li>
<li>gem install bootstrappers -v 4.0.rc1</li>
</ul>


<p>有任何問題，請回報到 Github 上的 issues 上。</p>

<p>Boostrappers 是針對我在 2013/03 月底測試 Rails 4.0.beta1 測出來的 solution 更換掉 gemset 的。目前應該是沒什麼大問題&#8230;</p>

<p>不過這次值得注意的是，Rails4 底層又換了不少 API，包括 generator 的 action 和 migration，所以為了 bnootstrappers 的升級，我被迫 release 了三隻 gem。</p>

<p>包括我之前寫的 <a href="https://github.com/xdite/auto-facebook">AutoFacebook</a>，也被迫出了一個 Rails4 版本。</p>

<ul>
<li>gem install auto-facebook -v 0.1.rails4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 isis 作為 Hipchat bot 取代 Hubot]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/20/isis-replace-hubot-as-hipchat-bot/"/>
    <updated>2013-04-20T12:25:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/20/isis-replace-hubot-as-hipchat-bot</id>
    <content type="html"><![CDATA[<p>最近公司頻道從 <a href="http://blog.xdite.net/posts/2013/04/01/move-to-hipchat/">IRC 換到 Hipchat</a> 上面，本來也想要把 <a href="http://hubot.github.com/">Hubot</a> 也一起搬過去的。</p>

<p>但是 Hubot 的安裝真是惡夢，光是 node.js 版本和 npm 之間的 dependencies 就可以搞死人。我們公司現在又沒有專職的 SA，工具蠻多都是我自己下海寫的&#8230;.</p>

<p>最後想了一下，決定找一套在 ruby 下也很好開發的 hipchat bot framework。</p>

<p>最後找到這套 <a href="https://github.com/whitehat101/isis">isis</a>。因為<a href="http://rocodev.com">敝公司</a> 是 100% 靠 Ruby 吃飯的，所以瞬間就把寫 bot 的門檻拉到很低&#8230;</p>

<h3>掛上 hipchat bot 的方式</h3>

<p>因為 bot 是常駐在聊天室的，所以你必須要幫 bot 申請一個 hipchat 專用帳號。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">hipchat</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">jid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">DDDD_XXXXX@chat.hipchat.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Full Name</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;password&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">history</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span> <span class="c1"># num of history fields to request</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rooms</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DDDD_room_name@conf.hipchat.com</span>
</span><span class='line'>    <span class="c1"># - DDDD_second_room_name@conf.hipchat.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bot 走 Jabber 通訊協定。Jid 和 Romm 的資訊在 <a href="https://yourcompany.hipchat.com/account/xmpp">https://yourcompany.hipchat.com/account/xmpp</a></p>

<p>jid 格式 <code>DDDD_XXXXX@chat.hipchat.com</code>，room 格式 <code>DDDD_room_name@conf.hipchat.com</code></p>

<h3>開發 / 掛上 Plugin 方式</h3>

<p>isis 的 plugin 撰寫很簡單。基本上只要到 <code>lib/isis/plugins</code> 多開一個 <code>class</code> 繼承 <code>Isis::Plugin::Base</code>，然後掛進 config.yml。
這樣就做好了&#8230;</p>

<h3>Local 測試</h3>

<p><code>bin/isis run</code> 就可以把 bot 跑起來了。而若要背景常駐要跑 <code>bin/isis start</code></p>

<h3>Deployment</h3>

<p>開發完畢推上 git 之後，要讓 bot 重開還要跑到 server 上跑 <code>bin/isis restart</code>。懶人如我當然覺得這很麻煩，所以我用 <a href="https://github.com/brentd/gitploy">gitploy</a> 和 Rake 檔寫了 autodeploy，跑 <code>rake deploy</code> 就會動了。</p>

<p>順便還參考 <a href="https://github.com/hipchat/hipchat-rb/blob/master/lib/hipchat/capistrano.rb">hipchat/hipchat-rb</a> 的 deploy 檔，做了 deploy hook 掛在 bot 的 deploy rake 上，這樣起碼有人 deploy bot 時大家會知道，以免 bot 被搞爛了沒人發現&#8230;。</p>

<p><code>config/gitploy.rb</code> <a href="https://gist.github.com/xdite/5424771">https://gist.github.com/xdite/5424771</a></p>

<p><code>Rakefile</code> <a href="https://gist.github.com/xdite/5424780">https://gist.github.com/xdite/5424780</a></p>

<h3>後記</h3>

<p>昨天後續還寫了幾隻常用 bot，比如說「午餐吃什麼 bot」、「redmine #issue_number bot」、「網頁自動抓標題 bot」。</p>

<p>不過這不是重點，重點是 bot framework 架好之後，禮拜五晚上同事們竟然不睡覺，一直在惡搞這隻 bot 瘋狂加功能&#8230;.XD</p>

<p>看起來 bot 的確可以玩出不少花樣啊&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何招聘技術人才，一點心得 [JD篇]]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/06/hiring-advice/"/>
    <updated>2013-04-06T06:10:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/06/hiring-advice</id>
    <content type="html"><![CDATA[<p>這是一兩個禮拜前貼在 <a href="https://www.facebook.com/xdite/posts/10151575386888552">Facebook 牆上的心得</a>。整理一下重貼在 Blog 上&#8230;</p>

<p>整理一下過去幾年的心得，如下：</p>

<h2>JD 部分</h2>

<h3>寫清楚 Job Description</h3>

<ul>
<li>寫清楚公司能提供什麼（薪資福利）</li>
<li>希望對方已經有什麼經驗？（已具備什麼技術，什麼職位就寫什麼）。</li>
</ul>


<h3>不要徵超人</h3>

<p>不要徵 「超人」。徵「超人」沒有意義。</p>

<p>這裡的超人若以 Web 界來比喻，就是你可能看到 JD 這樣寫「熟 Rails、熟 jQuery、熟 ORM、熟 API 設計、熟 OO Design、熟&#8230;.」</p>

<p>若一個工作職缺，出現「超人」的內容。通常表示：</p>

<ul>
<li>這個公司只缺一個人，就是做到死的超人。Developer 不是笨蛋，看了也知道雇主想幹嘛…</li>
<li>雇主不知道自己想徵什麼人。這對 Developer 來說也是危險訊號。</li>
</ul>


<p>如果你不是這種心態，是認真想招到合適的人。那麼請把需求寫清楚。</p>

<ul>
<li>如果團隊用 Git 很深，那麼寫上「會使用 Git」。</li>
<li>如果團隊用 Rails，那麼寫上「熟 Rails」。</li>
<li>如果團隊用 Rails，願意收 junior，那麼寫上「具備 MVC 開發經驗」。</li>
</ul>


<p>不要貪心寫得希望對方什麼條件都具備，這樣十之八九只會收到一堆充滿 BuzzWord (對方希望合你胃口嘛)的垃圾履歷，大大拖慢你篩寫出正確合適的候選人的速度。</p>

<p>必須要理解到一個現實，不是每個人一進公司，就有辦法馬上 pickup，寫一堆「熟OO」並沒有任何幫助。只要寫應徵此職位的「最低條件」即可。</p>

<p>舉例來說：因為如果對方不會 Git 你又不想 train 他 Git，你就要寫「會使用 Git」。如果你可以接受 train 對方 Git，只要寫「不害怕 Command Line」即可。不然寫一個「熟 Git」，雙方都不知道這到底是「熟」是要「熟」到什麼程度…</p>

<h3>不要請對方直接寫信到 jobs@mycompany.com</h3>

<p>通常這樣做的下場是，「你會覺得自己會收到一堆來亂的履歷」。這不是應徵者的錯，因為你沒告訴人家「你想看什麼樣的履歷」。</p>

<p>而且，不是人人都有辦法寫出「有重點」的履歷。</p>

<p>我建議的方式是乾脆設計一張表單，請對方照格式填。不需太制式，但你可以用這種方式引導對方把他自身的重點 highlight 出來。而且 fit 你的需求。</p>

<p>這樣可以節省你在看履歷時很多時間。</p>

<p>Appsumo 的 Noah Kagan 在 <a href="http://www.appsumo.com/~Q3_wb/">Learn Chief Sumo&#8217;s Proven Automated Hiring Formula</a> 也是用了類似的手段。只不過他做得接近自動化…</p>

<p>至於我們公司的 <a href="http://rocodev.wufoo.com/forms/job-apply/">應徵表單</a>，我是這樣設計的..</p>

<h3>把招聘啟示貼在正確的地方</h3>

<p>徵人公告只是一篇文章，你可以貼在任何地方。</p>

<p>但就我的經驗是，貼在你平常在混的社群裡就好，不要到處亂貼。高曝光率對招聘一點幫助都沒有。</p>

<p>怎麼說呢？這幾年下來，我發現共事過最棒的同事，或收過來看起來不錯的履歷。都是在社群裡面徵來的。不是在社群裡面原本就有見過面的，就是看我的 Blog 在徵才，寫信過來應徵的。再不然就是平常有在 Facebook follow 動態的人。</p>

<p>至於那些在其他地方看到徵才啟示寫過來的履歷。怎麼說呢？你真的會覺得他寫過來的東西「不合胃口」。</p>

<p>相信我，收到「很多」履歷，絕對也不是什麼好事&#8230;。因為最痛苦的往往不是你已經很忙了，卻招不到人。而是你已經很忙了，還要花上一堆時間過濾履歷；挑來面試的人，還瘋狂浪費你寶貴的時間…</p>

<p>Noah Kagan 在 <a href="http://www.appsumo.com/~Q3_wb/">Learn Chief Sumo&#8217;s Proven Automated Hiring Formula</a> 這篇其中的一個招聘技巧。也是建議不要到處亂貼，儘量把徵才啟示、通知放自己家產品的 Facebook Page 邊欄，或者是產品網站、產品通知信裡。</p>

<p>這些原本就認同你產品的人，有極大的機會 fit 公司 culture。而不是網路上的任意陌生人。</p>

<h2>其他</h2>

<p>這篇文章已經太長了。下次有空再來寫 interview…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把公司 Log 搬到 Hipchat...]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/01/move-to-hipchat/"/>
    <updated>2013-04-01T22:19:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/01/move-to-hipchat</id>
    <content type="html"><![CDATA[<p>一直以來（ 5-6 年前開始..)，我都是用 IRC 在管團隊的 Log 和通知。</p>

<p>這個習慣最早以來是跟前輩學習來的。這在比較強悍的技術團隊內部，幾乎是行之有年的標準 Convention。</p>

<p>（ 可見 Flickr 著名的 <a href="http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr">10+ Deploys Per Day: Dev and Ops Cooperation at Flickr
</a> 投影片 (P.52)，不過他們大概 2006 年就開始這樣做了，這篇只是後來比較漂亮的整理&#8230;）。</p>

<p>當年 <a href="http://t17.techbang.com/topics/7181-t-off-state-technical-departments-magic-work-processes-open-to-the-public">在 T 客邦</a>，也是用 redmine + IRC bot 自己搞了一套。</p>

<p>把 Log 都打到 IRC 有很多好處。團隊成員去開會、或者暫時離開。回到電腦前，還是可以很快速的掌握剛剛發生了什麼事。再加上 issue tracking 或者是 system alert 其實是很洗信箱讓人容易分神的東西，所以我們把這些幾乎都搬到 IRC 上，建立出一個可以非同步但又高效率的合作開發模式。</p>

<p><img src="http://www.techbang.com.tw/system/images/56563/original/f619713e13061413515e24406f7fbe02.png?1312367582" alt="img" /></p>

<p><img src="http://www.techbang.com.tw/system/images/56564/original/a2c052c70ec3bfc1023c2660bfbf54b9.png?1312367582" alt="img" /></p>

<p>不過這個模式還是有一些極限，所以最近在 survey 過後，最近我決定把 <a href="http://rocodev.com">公司</a> 整套 solution 搬到 <a href="http://hipchat.com">Hipchat</a> 上。</p>

<h2>主要搬家原因</h2>

<ol>
<li>發現每個同事一進來都要教怎麼用 <a href="http://www.irssi.org/">irssi</a> + 工作站掛 irc，學習成本很高</li>
<li>公司聊天室是 skype, log 在 irc 上，開兩窗有點麻煩。加上 skype-bot 不是不能作，只是我覺得 skype-bot 很吵…</li>
<li>人員離職很麻煩，因為要把 irc room 的 key 和 info 整套換掉，無法作權限控管</li>
<li>demo 給別人看 irc solution 時也很麻煩，因為對方一定看得到我們的 key &#8230;.</li>
<li>對 irc 訊息上色要試很久，對一般的 developer 門檻有點高</li>
<li>irc log 多半要切到桌機才能看，沒有 mobile solution。</li>
</ol>


<p>所以最後就整套就搬到 <a href="http://hipchat.com">Hipchat</a> 了。看起來大家現在是用的蠻習慣的。</p>

<p><img src="https://fbcdn-sphotos-h-a.akamaihd.net/hphotos-ak-snc6/221729_10151576143483552_1020905528_n.jpg" alt="img" /></p>

<h2>Hipchat 的好處</h2>

<ol>
<li>主要是 Web Based，但有 iOS, Android, Mac, Windows, Linux client</li>
<li>有 group 和 permission control，踢人加人很方便</li>
<li>API 整合，寫 bot 很容易</li>
<li>聊天行為與一般 IRC chat 蠻相近的</li>
<li>貼圖貼檔案貼 Link 很方便</li>
<li>一樣會存歷史紀錄，就算離線了，重新上線還是可以找 Log</li>
<li>很多主流系統整合支援（ github, redmine, capistrano, airbrake….)</li>
<li>5 人以下現在是免費的方案…</li>
</ol>


<h2>Hipchat integration</h2>

<p>我們目前是把目前的幾種 Log 都打到 hipchat 上</p>

<ol>
<li>Github (github 的 hook 支援 hipchat, pull request, push , merge 都會通知&#8230;)</li>
<li>Capistrano Deploy <a href="http://blog.hipchat.com/tag/capistrano/">http://blog.hipchat.com/tag/capistrano/</a></li>
<li>Airbrake ( server error 通知系統, airbrake 支援 hipchat )</li>
<li>Redmine (官方的 hipchat/redmine_hipchat 不好用，所以我自己改了一隻 <a href="https://github.com/rocodev/redmine_hipchat">rocodev/redmine_hipchat</a> 出來)</li>
</ol>


<p>之後還會掛更多東西上去…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audiophile.im 我是發燒友]]></title>
    <link href="http://blog.xdite.net/posts/2013/03/22/audiophile-dot-im/"/>
    <updated>2013-03-22T03:51:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/03/22/audiophile-dot-im</id>
    <content type="html"><![CDATA[<p><a href="http://audiophile.im" title="audiophile.im by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8227/8578633622_e80e1c395e_n.jpg" width="320" height="259" alt="audiophile.im"></a></p>

<p>因為最近在朋友 <a href="http://blog.gslin.org">@gslin</a> 的推坑下，開始玩起了耳機和 DAC…</p>

<p>因為這塊領域完全是個無底坑。預算有限下我打起了往 <a href="http://amazon.co.jp">Amazon Japan</a> 找耳機的主意，發現價差實在太大了…</p>

<p>因為 Amazon Japan 某些東西是不寄 Taiwan 的，要透過類似 <a href="http://tenso.com">Tenso</a> 這類的轉運服務寄回台灣。而 Tenso 是抓材積在算服務費以及 EMS 郵費。一隻一隻上 Amazon 查價錢和材積換算運費非常浪費時間。</p>

<p>查到煩了，想說自己寫個程式都比去按計算機快，最後就爆氣寫了一個查價系統。</p>

<p>最後就是這個網站：<a href="http://audiophile.im">Audiophile.im</a> 我是發燒友。</p>

<p>基本上網站的運作原理就是：幫你上 Amazon Japan 查你想要買的耳機價錢，並且抓到材積，根據材積算出轉運回台的手續費，最後換算成台幣。這樣你可以快速知道，想買的耳機和台灣賣的價格確切是差多少…</p>

<p>希望能幫大家省到一點錢。</p>

<p>當然，如果你還是希望有穩定的 support 和服務，我還是推薦你在台灣買，貴了一些但是有保障。我個人是蠻喜歡去 <a href="http://pincha.com.tw">品嘉</a> 就是了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We are hiring]]></title>
    <link href="http://blog.xdite.net/posts/2013/03/11/rocodev-is-hiring/"/>
    <updated>2013-03-11T18:56:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/03/11/rocodev-is-hiring</id>
    <content type="html"><![CDATA[<p>我們公司 <a href="http://rocodev.com">Roco</a> 最近要徵人。</p>

<p>我們是專業的軟體開發公司。主要技術為 Ruby on Rails。擅長敏捷軟體開發。曾經在 2012/9 參加 Facebook World Hack 奪得世界級首獎。具備優異的開發實力。</p>

<p>公司的業務最近還在不斷的成長。因此我們預計將再招募數位夥伴加入我們的團隊。</p>

<p>開放三種職缺。</p>

<h3>Software Developer</h3>

<ol>
<li>有過 Ruby / Rails 撰寫經驗</li>
<li>具有網站開發經驗</li>
<li>熟悉資料庫觀念</li>
<li>熟悉任何一套 Linux 下的 shell 操作 ( bash / zsh / csh 等等&#8230; )</li>
<li>有獨立解決問題或 Trouble Shooting 的能力</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>熟悉 HTML 標準</li>
<li>熟悉 CSS</li>
<li>熟悉 JavaScript / JavaScript Library ( jQuery) 的使用</li>
<li>熟悉 shell script</li>
<li>熟悉 vim / git</li>
</ol>


<h3>Web Designer</h3>

<ol>
<li>2 年以上的網頁設計經驗（曾在網路公司工作一年以上者佳）</li>
<li>熟悉 HTML / CSS 排版設計</li>
<li>略懂 jQuery</li>
<li>熱衷設計體貼流暢的使用者介面</li>
<li>熱衷做出讓人眼睛為之一亮的設計</li>
<li>不排斥學習任何新工具</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>熟悉 SCSS / 熟悉 Compass</li>
<li>用過 Fire.app</li>
</ol>


<h3>Fronted Developer</h3>

<ol>
<li>熟悉 HTML 標準</li>
<li>熟悉 jQuery</li>
<li>熱衷做出讓人眼睛為之一亮的使用者介面</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>開發過 jQuery Plugin</li>
<li>開發過 Backbone 應用程式</li>
</ol>


<p>===</p>

<p>若您覺得您是合適人選，或您覺得雖達不到需求、但有興趣挑戰嘗試這分工作，都歡迎<a href="http://rocodev.com/jobs">應徵</a> 。</p>

<p>====</p>

<p>同場加映。我們公司提供以下福利</p>

<ul>
<li>24&#8221; Dell 螢幕</li>
<li>舒適 Aeron 座椅</li>
<li>寬敞 Ikea Galant</li>
<li>每月無限量零食</li>
<li>不定期公司聚餐</li>
<li>Rails 前緣技術指導</li>
<li>線上學習教材贊助</li>
<li>技術研討會門票贊助</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 Ruby on Rails Reading List]]></title>
    <link href="http://blog.xdite.net/posts/2013/01/30/2013-reading-list/"/>
    <updated>2013-01-30T08:13:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/01/30/2013-reading-list</id>
    <content type="html"><![CDATA[<p>Here are the reading marterials I recommend in 2013:</p>

<h2>Basic</h2>

<p>If you are new to Ruby / Rails world, I suggest you take following courses :</p>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/try-ruby">Try Ruby</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/try-git">Try Git</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/git-real">Git Real</a></li>
<li>Peepcode <a href="https://peepcode.com/screencasts">Meet Command Line</a></li>
<li>Peepcode <a href="https://peepcode.com/products/advanced-command-line">Advanced Command Line</a></li>
<li>Zed Shaw <a href="http://ruby.learncodethehardway.org/">Learn Ruby The Hard Way</a></li>
</ul>


<h2>Learning Rails</h2>

<p>Use following courses to build a simple application, like a &#8220;forum&#8221;</p>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/rails-for-zombies-redux">Rails for Zombies Redux</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/rails-for-zombies-2">Rails for Zombies 2</a></li>
</ul>


<h2>Basic web development</h2>

<ul>
<li>CodeSchool <a href="http://www.codeschool.com/courses/jquery-air-first-flight">jQuery Air: First Flight</a></li>
<li>CodeSchool <a href="http://www.codeschool.com/courses/jquery-air-captains-log">jQuery Air: Captain&#8217;s Log</a></li>
<li>CodeSchool <a href="http://www.codeschool.com/courses/css-cross-country">CSS Cross-Country</a></li>
<li>Codecademy <a href="http://www.codecademy.com/zh/tracks/javascript">Javascripts</a></li>
</ul>


<h2>Intermediate Ruby on Rails</h2>

<p>( If you are not familer with TDD with Ruby on Rails, these two books might be a good start)</p>

<ul>
<li>Michael Hartl <a href="http://ruby.railstutorial.org/">Rails Turtorial</a></li>
<li>Ryan Bigg <a href="http://www.manning.com/bigg2/">Rails in Action 4</a></li>
</ul>


<p>UT on Rails is also a excellent learning material</p>

<ul>
<li>Schneems <a href="http://schneems.com/ut-rails">UT on Rails</a></li>
</ul>


<h2>Testing</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/rails-testing-for-zombies">Rails testing for zombies</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/testing-with-rspec">Testing with Rspec</a></li>
<li>Noel Rappin <a href="http://pragprog.com/book/nrtest/rails-test-prescriptions">Rails Test Prescriptions: Keeping Your Application Healthy</a></li>
<li>Thougutbot <a href="https://learn.thoughtbot.com/workshops/18-test-driven-rails">Learn Test-Driven Development using RSpec and Capybara.</a></li>
</ul>


<h2>Advanced web development</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/journey-into-mobile">Jounry into Mobile</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/anatomy-of-backbonejs">The Anatomy of Backbone</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/coffeescript">CoffeeScript</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/assembling-sass">Assembling Sass</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/assembling-sass">Assembling Sass Part2</a></li>
</ul>


<h2>Refactoring Ruby / Rails code</h2>

<ul>
<li>Codschool <a href="http://www.codeschool.com/courses/rails-best-practices">Rails Best Practices</a></li>
<li>Chad Pytel / Tammer Saleh : <a href="http://railsantipatterns.com/">Rails Antipattern</a></li>
<li>John Athayde / Bruce Williamsp <a href="http://pragprog.com/book/warv/the-rails-view">The Rails View: Create a Beautiful and Maintainable User Experience</a></li>
<li>Eric Davis <a href="http://www.refactoringredmine.com/">Refacotoring Redmine</a></li>
<li>Code Climate <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></li>
</ul>


<h2>Writing better Ruby code</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/ruby-bits">Code Ruby Bits</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/ruby-bits-part-2">Code Ruby Bits Part 2</a></li>
<li>David A. Black <a href="http://www.manning.com/black2/">The Well-Grounded Rubyist</a></li>
<li>Russ Olsen <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">Eloquent Ruby</a></li>
<li>Avdi Grimm <a href="http://devblog.avdi.org/2012/06/05/confident-ruby-beta/">Confident Ruby</a></li>
<li>Avdi Grimm <a href="http://exceptionalruby.com/">Exceptional Ruby</a></li>
<li>Stefan Kaes <a href="http://www.informit.com/store/writing-efficient-ruby-code-digital-short-cut-9780321540034">Writing Efficient Ruby Code (Digital Short Cut)</a></li>
</ul>


<h3>Podcast / Journal of writing better Ruby/Rails code</h3>

<ul>
<li><a href="http://devblog.avdi.org/rubytapas/">Ruby Tapas</a></li>
<li><a href="https://www.destroyallsoftware.com/screencasts">Destroy All Software</a></li>
<li><a href="https://practicingruby.com/">Practicing Ruby</a></li>
</ul>


<h2>Object-oriend Design in Ruby on Rails</h2>

<ul>
<li>thoughtbot <a href="https://learn.thoughtbot.com/products/13">Ruby Science</a></li>
<li>Avdi Grimm <a href="http://objectsonrails.com/">Object on Rails</a></li>
<li>Russ Olsen <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a></li>
<li>Jay fields <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Refacoting : Ruby Edition</a></li>
<li>Sandi Metz <a href="http://www.amazon.com/dp/0321721330">Practical Object-Oriented Design in Ruby: An Agile Primer</a></li>
</ul>


<h2>Know Rails better</h2>

<ul>
<li>José Valim <a href="http://pragprog.com/book/jvrails/crafting-rails-applications">Crafting Rails Applications: Expert Practices for Everyday Rails Development</a></li>
<li>Marc-André Cournoyer <a href="http://owningrails.com/">Owning Rails: The Rails Online Master Class</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/299-rails-initialization-walkthrough">Rails Initialization Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/319-rails-middleware-walkthrough">Rails Middleware Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/317-rack-app-from-scratch">Rack App from Scratch</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/349-rails-modularity">Rails Modularity</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/355-hacking-with-arel">Hacking with Arel</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/385-authorization-from-scratch-part-1">Authorization from Scratch Part 1</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/386-authorization-from-scratch-part-2">Authorization from Scratch Part 2</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/395-action-controller-walkthrough">Action Controller Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/397-action-view-walkthrough">Action View Walkthrough</a></li>
</ul>


<h2>Guideline of writng Ruby / Rails code</h2>

<ul>
<li><a href="http://www.refactoringredmine.com/">ruby-style-guide</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">rails-style-guide</a></li>
<li><a href="https://github.com/hopsoft/rails_standards/tree/rails-3-2">rails_standards</a></li>
<li>thoughtbot <a href="https://github.com/thoughtbot/guides">guides</a></li>
</ul>


<h2>Resources of latest Ruby</h2>

<ul>
<li><a href="http://ruby5.envylabs.com/">Ruby5</a></li>
<li><a href="http://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="http://www.rubyinside.com/">Ruby Inside</a></li>
<li><a href="http://www.rubyflow.com/">RubyFlow</a></li>
<li><a href="http://rubyrogues.com/">RubyRogues</a></li>
<li><a href="http://learn.thoughtbot.com/podcast">Thoughtbot Podcast</a></li>
<li><a href="http://railscasts.com/">Railscast</a></li>
<li><a href="http://www.confreaks.com/">Confreaks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 我的 commit 數據]]></title>
    <link href="http://blog.xdite.net/posts/2013/01/08/2012-commit/"/>
    <updated>2013-01-08T20:04:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/01/08/2012-commit</id>
    <content type="html"><![CDATA[<p>Github 今天<a href="https://github.com/blog/1360-introducing-contributions">上了新的 features： Contributions</a> 。</p>

<p>在新的個人頁面可以看到過去一年自己 Commit 的軌跡&#8230;。</p>

<p>看了一下，我公開的 commit 有 923 次。</p>

<p><a href="http://www.flickr.com/photos/xdite/8361383762/" title="2012-public by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8079/8361383762_d03e2a7068_z.jpg" width="640" height="279" alt="2012-public"></a></p>

<p>含 Private repo (公司和自己的 side project)，有 3363 次。</p>

<p><a href="http://www.flickr.com/photos/xdite/8361383756/" title="2012-private by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8465/8361383756_cb712eab89_z.jpg" width="640" height="280" alt="2012-private"></a></p>

<p>另外一些之前整理在 FB 上的數據。2012 年，我：</p>

<ul>
<li>出國了四次</li>
<li>去過了三個國家</li>
<li>給了超過 10 場 talk</li>
<li>完成了五個案子</li>
<li>opensource 了兩個熱門 gem</li>
<li>拿了一個世界大獎</li>
<li>開了一間公司</li>
<li>開發了超過 10 個 Rails porject</li>
<li>寫了超過 60 篇文章</li>
<li>寫作了超過 30 萬字</li>
<li>讀了超過 200 本書&#8230;&#8230;</li>
</ul>


<p>加上去年一整年 commit 的 3300 次。</p>

<p>到底哪來的這麼多時間啊？..orz</p>

<p>結論是，應該要來放個假了嗎？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Book] 耶誕限時折扣]]></title>
    <link href="http://blog.xdite.net/posts/2012/12/24/christmas-books-offer/"/>
    <updated>2012-12-24T16:00:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/12/24/christmas-books-offer</id>
    <content type="html"><![CDATA[<p>Essential Rails Design Patterns
<a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">http://rails-101.logdown.com/books/3-essential-rails-pattern</a></p>

<p>限時特價 9.99USD</p>

<p>被大家嫌拖稿很久的本書，終於在 12/22 新增了接近 8 萬字，共 165 頁的內容。</p>

<p>Rails 101
<a href="http://rails-101.logdown.com/books/1-rails-101">http://rails-101.logdown.com/books/1-rails-101</a></p>

<p>限時特價 4.99 USD</p>

<p>（ 籌備 Rails 4.0 版本中 ，到時候會寄出免費更新 ）</p>

<p>特價到 2012/12/31 午夜為止。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DHL 包裹遺失事件]]></title>
    <link href="http://blog.xdite.net/posts/2012/12/06/dhl-sucks-missing-package/"/>
    <updated>2012-12-06T23:04:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/12/06/dhl-sucks-missing-package</id>
    <content type="html"><![CDATA[<p>我的包裹被 DHL 寄送過程中，被錯誤遞送，現已找回。故文章刪除。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何閱讀 Rails 原始碼]]></title>
    <link href="http://blog.xdite.net/posts/2012/11/25/how-to-read-sourcecode/"/>
    <updated>2012-11-25T00:28:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/11/25/how-to-read-sourcecode</id>
    <content type="html"><![CDATA[<p>開始有計畫整理一些在 <a href="http://rubyconfchina.org">RubyConf China</a> 大家線下問我的問題的答案。</p>

<p>挑選出來暫定的第一篇是大會期間詢問度最高的：「如何閱讀 Rails 原始碼」。</p>

<p>想要「閱讀 Rails 原始碼」的原因很多，不過多半的出發點都是想要能夠設計出更好的 Plugin (Gem)、或者是希望能在程式碼出錯時，能夠更快在 Rails 原始碼快速找到答案。</p>

<p>但擺在眼前的事實是， Rails 的原始碼已經成長大到成幾萬行的怪獸，如何「看懂」或者是有效率的找到答案，已經變成是一個很大的難題。</p>

<p>以下是我根據這幾年的經驗，能夠給各位的建議：</p>

<h2>1. 從單純的部分切入，例如 Helper</h2>

<p>最令大家頭疼的地方是，這麼多程式碼，要從哪部分開始讀起。</p>

<p>如果你是初心者，想要跳進這個池子裡，想找點簡單的東西讀，我會建議你先從「Helper」的部分開始讀。「Helper」是整個 Rails 程式碼裡面最獨立的部分（不牽扯到 request 呼叫），而且結構相對單純。</p>

<h2>2. 從 request 開始，到 rack，到 routing，到 controller，最後再到 model</h2>

<p>我真正開始有系統的讀懂 Rails code，是從一門線上 <a href="http://owningrails.com">Owning Rails</a>開始的。這門課的宗旨是，就是教你有效掌握搞懂 Rails 的核心與結構。相當有趣的是，他並不是教你讀任何 Rails 代碼，而是實際一步步帶你造出一個「mini Rails」。而造完這個 「mini Rails」之後，學員也能夠開始神奇的開始擁有快速找 code 的能力。</p>

<p>我在去年曾經寫過一篇 <a href="http://wp.xdite.net/?p=2407">Owning Rails masterclass</a> 介紹過這個課程。</p>

<h4>第一天：造出自己的 mini Rails</h4>

<p>帶你如何寫出精簡版 ActiveRecord、寫 rack app、用 rack app 改出精簡版 ActionController、自己 implement 出 before<em>, after</em>, around_ filter、自己 implement 出 view。然後最後再用你自己刻出來的這套 mini Rails 寫 web application。</p>

<h4>第二天的課程</h4>

<p>Refactor 昨天寫的 mini Rails，教你如何 trace Rails core。利用 Rails internal API 客製化出你想要的特殊 function、library。作業有 custom validator、custom finder、create responder、create form builder、使用 Railtie 客制 Engine、造 plugin。</p>

<p>宥於這是付費課程的關係，我也無法公開提供各位更進一步的教材內容。但是我能夠告訴各位這們課程為什麼會這樣設計，讓你可以也依循著這個軌道去自我進修。</p>

<h3>rack</h3>

<p>一個 request 進來，首先通過的是層層的 rack middleware。所以必須要先理解什麼是 rack，rack 的運作原理是什麼。可以試著自己先寫一個 rack app 玩看看。</p>

<p>如果想知道 Rails 裡面的 request 流程會經過哪些 middleware，被加過哪些工。可以在 Rails 專案裡面打 rake middleware，再去把 class 一個一個叫出來讀。</p>

<h3>routing</h3>

<p>request 通過 rack 層進來後，首先面對的是 dispatch 問題，Rails 透過 routes.rb 進行 dispatch。而如何 dispatch 到正確的 controller，中間靠的就是 regexp。</p>

<h3>controller</h3>

<p>開發者在 controller 會牽涉到兩個常用的相關機制：Filter 與 View Rendering。Filter 時怎麼運作的。method 應該是回傳「值」，怎麼做到自動回傳的是 render 出來的view。</p>

<h3>model</h3>

<p>ActiveRecord 的上一層就是一套 ActiveModel API。其實 Rails 不一定要靠 ActiveRecord，也可以透過實作一個 Class 加上部分機制做出自己的 ORM。其中 validation, finder 都是這方面的課題。</p>

<h2>3. 搞懂 Rails 的啟動流程</h2>

<p><a href="http://railscast-china.com">RailsCast China</a> 曾經 release 過一個很好的影片：<a href="http://railscasts-china.com/episodes/the-rails-initialization-process-by-kenshin54">The Rails Initialization Process By kenshin54</a></p>

<p>講解了整個 Rails 啟動流程。你也可以讀由 Ruby on Rails 官方釋出的這篇<a href="http://guides.rubyonrails.org/initialization.html">官方教學啟動流程</a>去更加了解啟動過程中究竟會經過哪些檔案，如果要寫 plugin 可以 hook 在哪一些部分。</p>

<h2>4. 實際簡單寫一個 Rails Plugin</h2>

<p>最好的學習方法就是動手實作。在看過以上這一些資料之後，我建議你可以實際透過開發一個 Gem 去更加了解整個 Rails 內部的結構。</p>

<p>目前 Rails Plugin 幾乎都是以 Engine Gem 的形式釋出。所以透過撰寫一個 Gem，可以了解到：</p>

<ul>
<li>如何將自己的 Library 與現有 API 整合</li>
<li>如何將自己的 Library 掛 / 不掛進啟動 process 中。</li>
<li>Engine 與 Railtie 的結構</li>
<li>如果有相依檔案，如何撰寫 generator，把檔案放進去 project 裡面。</li>
<li>如果有檔案操作和客製選項，如何透過 thor 這個工具去達到檔案修改的目的。</li>
</ul>


<p>算是一個相當好的鍛鍊。</p>

<h2>5. 讀別人（熱門）的 Rails Plugin</h2>

<p>有時候，想要實作某一些功能不得其法。最好的方式就是去讀有類似功能的 Gem，去看看其他作者怎麼做的。有時候會翻到他們用了不少你根本不知道的 Rails API。</p>

<p>順著他們用這些 Rails API 的方法，可以更快的在 Rails 原始碼找到你要的答案…</p>

<h2>小結</h2>

<p>希望以上的方法能夠協助各位更快的上手讀通 Rails 的原始碼。有任何問題歡迎留言在底下討論。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyConf China 2012 演講：最佳實踐如何變成了最慢實踐]]></title>
    <link href="http://blog.xdite.net/posts/2012/11/20/rubyconf-china-2012-ten-slow-things-you-dont-know/"/>
    <updated>2012-11-20T03:24:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/11/20/rubyconf-china-2012-ten-slow-things-you-dont-know</id>
    <content type="html"><![CDATA[<script async class="speakerdeck-embed" data-id="60e4fb4013c5013077d112313d1a82a3" data-ratio="1.2994923857868" src="http://blog.xdite.net//speakerdeck.com/assets/embed.js"></script>


<p>這是我今年參加 <a href="http://rubyconfchina.org">RubyConf China 2012</a> 所給的演講。</p>

<p>不過這個投影片裡面的不少內容，是在現場直接解說掉的，所以只看投影片的話，可能不會知道這樣的設計慢在哪裡。這陣子比較忙，如果有空的話，過一陣子我再寫一個全文版的。</p>

<p>這個演講的主旨是：在以往，我們設計 Rails Application 時，為了想要寫出一些漂亮的架構，會參考一些 Best Practices，或者是參照官方 Rails 官方指南的 Convention 建議，進行設計。</p>

<p>但是這一些 Convention 或依照直覺的軟體設計，很大的成分其實會造成你的 Application Performance 下降。這些問題即使你裝了 New Relic 還是絕對抓不出來。而這些設計可能也不太能算是 Rails 或者是相關套件的錯，甚至是 nobody&#8217;s fault。這個 talk 會帶你找出這些問題，解釋原因，並且給出修正方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[被迫才是進步的原動力]]></title>
    <link href="http://blog.xdite.net/posts/2012/10/28/force-to-improve-yourself/"/>
    <updated>2012-10-28T02:12:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/10/28/force-to-improve-yourself</id>
    <content type="html"><![CDATA[<p>昨天看到神人 vgod 寫了一篇 <a href="http://blog.vgod.tw/2012/10/27/premature-optimization/">過早最佳化是萬惡的根源</a>，這篇文章是不錯。但是，對於「職業」那邊實在有太多奇怪的假設。</p>

<p>想了一下，決定還是在 FB 寫了一下我的看法，然後再轉貼到這裡來。</p>

<p>===</p>

<p>簡單回一下好了。關於職業的部分。我本來也是覺得就如同跟 @vgod 一樣所說，在裡面可以全新鍛鍊和學習各種知識和技能。</p>

<p>我在大學裡面，就是抱著這樣的心態，學習各種知識。我在大學裡面最認真修的課，不是數學（唯一感興趣的是線性代數、離散數學、代數）
，而是&#8230;.去修資科系基礎理論的課，什麼作業系統、計算機結構、演算法、資料結構、數位電路、etc&#8230;大概能修的我都修了。數學系最
重視的微積分、高等微積分，我沒有很喜歡。而且，我大概下課的時間都泡在系上的機房，弄網路、伺服器、寫寫簡單的網站。</p>

<p>而最後我也是抱著這樣的心態，選擇了第一份工作。因為我覺得大學的環境才能讓「自己有選擇想練什麼武功的自由」。
我希望一直這樣持續下去。</p>

<p>然而，接下來的事情。你們知道了，我被打臉了。狠狠的打了一巴掌。</p>

<p>那一天，我才發現我關在學校自己練的等級，跟職業的人是差上那麼多。這才是讓我選擇馬上離開那個環境的主因。</p>

<p>很多人以為「自己有選擇想練什麼武功的自由」，才能讓自己的 power 開到最大。我對這件事情有截然不同的感受。為什麼職業的環境會成長很快。因為上班領錢，才有限時被交出成果的壓力。而且那個壓力能造成的動力是遠比自己下定決心要練什麼技能的動力還要可怕的。上班，你會被迫限時學到跟這個領域所有「基礎」的工具。一個月「基礎的程度」，可能直接贏掉自己自由學「半年」以上的程度。</p>

<p>而且特別是，如果你的同事和老闆，都是佼佼者的話&#8230;.。到現在我還是相當感謝曾經共事過的 @gugod, @ihower, @gslin, @hlb, @嬸嬸 XD</p>

<p>我學到的就是。如果你想把什麼東西學好，稍微深呼吸一下（當然就是自學一點皮毛，希望不要進去之後死太慘），就跳下去&#8230;。
害怕溺水的恐懼會被讓你瞬間就學會游泳。（如果你跳下去就死拜託不要怪我&#8230;orz）</p>

<p>如果你曾經看過我半年前寫過的<a href="http://xdite-smalltalk.tumblr.com/post/18303489993">為什麼我想創業</a> 一文。
你就會知道，我在這四年裡面「被迫」學會了多少事。</p>

<p>職業工程師，並不是只有用 PHP 寫了一千個論壇和購物程式那麼無聊。老實說，寫到第二個第三個，你就會知道 Framework 的重要性。</p>

<p>當然，如果你之後玩到神兵級 Framework 如「Ruby on Rails」。那麼你還會更會知道，這世界不是只有 CRUD。（Ruby on Rails 本身
的架構採用了大量 <a href="http://www.amazon.com/Patterns-Enterprise-Application-Architecture-Martin/dp/0321127420">Patterns of Enterprise Application Architecture</a> 這本書裡面的實作，裡面也大量用了 Design Pattern 的技巧）。</p>

<p>不只如此，你還會從周遭的 ecosystem 的 plugin 中學到各種各式各樣的 pratical、theoretical 的佼佼實作。</p>

<p>當這些東西看多了以後你就更進一步的發現，語言根本不是重點，掌握這些「企業級理論」（註）的核心精隨，才是重點。</p>

<p>而當進一步又將 Ruby on Rails 玩的十分純熟之後。就會馬上意識到，用什麼語言寫，把 code 寫得多快已經完全不是重點了。</p>

<ul>
<li>如果專案控管能力不佳，需求一直在改變，那麼就算你的「架構理論」玩的再漂亮都是一樣的，結不了案就是結不了案。</li>
<li>如果團隊協調能力不佳，那麼不管公司投再多人進來，累死的就是那幾個人而已。</li>
<li>如果時間成本能力不佳，不是會造成公司大虧損賠本，甚至會專案進行到一半就被迫終止。</li>
</ul>


<p>很多人以為我網站寫的很快，是因為 Framework 的關係。真的不是這麼簡單&#8230;，那是我身上擁有所有的技巧綜合出來的結果。</p>

<p>如果我沒有領錢「被迫」進行我很多「不喜歡」的事，我不會學到這一些東西。如果我沒有「被迫」去處在那一些環境，我能學到的東西就限於「我在學校時一開始能望過去的眼界」，而不是環繞在我周遭各個神人的眼界。</p>

<p>而這也是為什麼我會寫出那兩篇文章的初衷。我不是出來走這麼一遭，不會發現我當初那樣的假設，完全不堪一擊。</p>

<p>而再舉一個例子，曾經很多人一直對我，開口閉口就是 Ruby on Rails 值得學習，感到很不解。事實上，我也是從這個 Framework 的進化裡面，
才學到人不能把眼界只侷限在某一個端點。我個人的能力，很大的原因是跟隨這個 Framework 一起成長的。如果我當初不是碰這個 Framework 起來，我恐怕真的沒有這個能力成長的這麼迅速。因為台灣沒有太多「大型」Scale （PV 千萬以上） 的網站，可以逼迫一個工程師直接從最基礎的 Turtorial 中，自學到那麼多 optimze techniques、best practices（更何況這種等級公司的入場卷，也不是你說想要應徵就能應徵上)。</p>

<p>從這個 Framework ecosystem 裡面產生出來的 plugin 也是世界上各式各地的程式設計師貢獻出來的，這裡面融合了他們公司現在「最好」的 pratices，有些甚至是 future architecture。如果我在一間悶頭自幹工具的公司上班，我是沒有機會見識到這一切的。</p>

<p>我不認為自己一開始有多好的眼界，能有辦法看到多棒的未來，並且照著我所看到的事堅定的往前走。甚至，直到現在，我現在還是不認為自己還是具備這個能力。但我唯一知道的是，我不能把自己鎖在自己的眼界裡。</p>

<p>我想說的話，就只有這樣而已。</p>

<p>[註] ：Deisgn Pattern、Agile、Testing、Scaling、Performace Tuning …</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[給尚未大學畢業的朋友的幾個人生建議 - 挑戰未來篇]]></title>
    <link href="http://blog.xdite.net/posts/2012/10/25/another-advice-for-undergraduate/"/>
    <updated>2012-10-25T23:19:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/10/25/another-advice-for-undergraduate</id>
    <content type="html"><![CDATA[<p>在<a href="http://blog.xdite.net/posts/2012/10/23/some-advice-for-undergraduate/">上一篇</a>中，我談到了三個能力是我建議培養的：「大量快速閱讀、外語交流、邏輯歸納推導」。接下來我想談談，我會勸你「什麼樣的決定不要作」。</p>

<p>這一篇我曾經思考了很久，我到底要不要認真的寫出來。（考量到文章刊登出來的批評聲浪）</p>

<h3>最不值得做的事</h3>

<h4>1. 漫無目的的拿高等教育學位（大學、碩士）</h4>

<p>台灣已經來到一個瘋狂的病態狀況。大學錄取率超過 100%。什麼人都能夠上大學。甚至大學招不滿人，還拜託對岸的大陸學生來念大學。</p>

<p>來念大學的人，往往也不知道自己來念大學的目的是什麼，只是因為爸媽叫自己來念，就來這裡放空四年等畢業。因為負擔不起學費，於是半工半讀，甚至多數學生整個大學生涯都在打工，唸書反倒是兼差而已。</p>

<p>在寫完上一篇文章的時候，有讀者發問：『私心希望加上「後悔以前沒有做什麼」的部分 XD 』</p>

<p>我必須要很認真的說，我最後悔的是：『後悔沒有拒絕我爸的願望：去念大學』。</p>

<p>別誤會，我並不是要說後悔曾經念過這間學校、後悔去念應用數學系。（甚至我這一輩子最感謝的就是當年被大學老師鞭策出來的極佳邏輯能力）</p>

<p>而是，早知道我喜歡的「作網站」這個職業。並不需要靠付高額的高等教育學費就能取得相關知識，並變成職業從業者。我不需要逃避那些我不喜歡修的課，修我根本沒興趣的學分，只為了取得學歷在等畢業。</p>

<p>因為甚至我翹課的時間，都是在宿舍玩架站或者是泡系上機房弄伺服器…</p>

<p>我可以早一點去就業，早一點為社會有貢獻。而不需要國家浪費在我身上的寶貴高等教育資源。最輝煌的四年時間被當年不懂事的我，浪費在「滿足我爸對我的表面期望」。</p>

<p>我爸真正的期望應該是希望我成為一個有用的人，不會餓死自己，對社會多少有貢獻。而不是去「拿一個大學學位」（取得一個大學學位是他『希望』的一種『表現形式』）。</p>

<p>這黃金的四年我浪費了很多時間在閉門造車，在揮霍人生，而不是真的認真的幹一些有意義的事業出來。</p>

<p><strong> 我的能量一直等到大學畢業後、終於不用躲躲藏藏的滿足別人對我的表面期望之後，才用力的迸發出來。如果可以，我希望我一開始就不用花時間在這件事情上。</strong></p>

<p>而一直到出社會、甚至當主管以後，我才開始意識到全民盲目的拿高等學位這件事，對國家的競爭力是多麼可怕的傷害。很多人以為讀大學用的都是自己的錢，浪費學費也是自己家的事。事實上，完全不是這回事。不管是讀公立大學或者是私立大學，國家都花了非常多錢在你身上。每一個人讀大學的成本，其實並不是光光只有學費而已。事實上政府對每一間學校的大量補助，才讓你可以每學期以最多只繳五六萬的代價就取得學位。事實上若真要計算，一個學期正常的每人教育成本應該是幾十萬台幣&#8230;。</p>

<p>但是，這當中有多少比例的人真的渴望上大學唸書？恐怕真的很少。幾乎絕大多數的學生都把念大學當作是可以打電動郊遊的坐牢而已。國家投注四年心血，結果學生放空放四年。</p>

<p>這完全是巨大的實體資源（金錢）以及黃金的無形資源（年輕人的青春）浪費。但卻沒有人對這件事情提出質疑。</p>

<p>大家都覺得外國人都超厲害，十幾歲二十幾歲技術就都超強，做出超屌的網站，創上超級厲害的公司。為什麼台灣人沒辦法？</p>

<p>很簡單，因為台灣人的人生從 22 歲才開始…人家 15-18 歲就開始了&#8230;</p>

<p>很多人也害怕，如果沒有一個大學學歷會找不到好的工作，有不錯的薪水。我出社會、當上主管以後才知道企業選才的標準完全不是你念哪個大學畢業的。而是你專業技能的純熟度、你當年的可塑性（年紀）。（換句話說你越老，但技術越嫩，競爭力只會越來越弱。）</p>

<p>沒有一個好的大學、碩士學歷，也只會影響你「第一分工作」的起薪。「第一分工作」並不是人生的全部。「第一分工作」只是唯一一個人家願意容忍你犯超級愚蠢錯誤的地方。</p>

<p>把時間浪費在『坐學校牢』上，完全沒有意義。如果你有一件事超級有熱情，那麼你就應該現在去作。如果你想光宗耀祖，那麼你應該從現在開始。</p>

<p>爸媽不會跟你說這件事，而他們會認為我在傳邪道。</p>

<h4>2. 不要去當研發替代役</h4>

<p>我的不少朋友和同學都是男生。他們不少人選擇服替代役，而不是直接當兵。我可以跟大家說，他們剛錄取的時候第一年都很開心。然後，然後，然後他們就不會再跟你講後面的故事了&#8230;..</p>

<p>因為大家都很後悔。但是你聽不到這些後悔的聲音。</p>

<p>每當有大學生在 conference 或社群聚會攔住我，詢問我對於未來的建議規劃，每次聽到有人想去再念個碩士，念完個碩士想再去當個替代役…</p>

<p>我總會試著勸他打消這個念頭，因為我知道後面會發生什麼事。但是我永遠都擋不住，因為他們總會堵我一句：「替代役 pay 起薪比較高，而且三年有保障&#8230;」</p>

<p>我聽到這一句，我就不繼續再講下去了。因為再講下去，我又會看成是「邪道中人」了。</p>

<p>現在看來，經歷了這一段歲月之後，我會回頭認為，也許台灣的「科技替代役」制度，原本是為了保證科技業人才的來源，以及保護科技業人才不因為當兵一年之後退伍變白癡（後來我覺得這有點像是都市傳說，因為不少人上班後被操了一兩個月後，魂就回來了。）。</p>

<p><strong> 但後來某種程度上，我認為是把台灣優秀人才殺光光的一種可怕制度&#8230;. </strong></p>

<p>為什麼？首先是「研發替代役」的資格需要「碩士畢業」。</p>

<p>嗯。聽到「碩士畢業」，其實多半就是「放空&#8230;.」。</p>

<p>放空兩年，接下來綁三年的研發替代役的生活。</p>

<p>為什麼綁三年替代役通常是開始後悔的起點？因為真實的狀況是，有辦法申請到研發替代役的公司，多半是已經相對有經濟規模的大型公司了。雖然他們有辦法給上「穩定」的 pay。但是通常役南們能拿到的也就是「穩定的工作內容」，沒有什麼特別性的機率拿到能夠開疆拓土的機會（逼自己成長）。穩定 pay 保證不低，但是幅度通常也跳不高。</p>

<p>其實出社會頭三年，是一個人很黃金的三年。因為第一年有人願意大幅負擔你學習犯錯的機會。接著第二年，你開始不再犯錯了，大致上可以開始摸出自己擅長什麼，適合往哪個方向走。第三年，開始有籌碼換上 pay 更好的工作。（而這個 pay，運氣好的話，甚至可以拿到比剛出社會高上 1.5 甚至 2 倍的數字）</p>

<p>而科技業的工作更現實，每三個月風向就換一次，每六個月技術就革命一次。甚至每年的黃金主題，都不一樣。</p>

<p>許多人會後悔。原因歸納不出以下幾個：</p>

<ul>
<li>(1) 現在工作，三個月就不喜歡，但是他不能跑，於是之後 2 年 9 個月的日子，放空…</li>
<li>(2) 現在工作，做得算有點興趣。但是完全沒有向上向左向又突破的空間，只好放空…</li>
<li>(3) 外面有更好的機會，有超級好的 pay，跑不了。有被外國挖角的機會，也跑不了。放空…</li>
</ul>


<p>你可以觀察到，最後的狀況幾乎都是放空…</p>

<p>放空完浪費了多少歲月呢？這樣一輪下來，通常都是 27,28 歲了… 這時候，他們才開始想找自己「真的有興趣的工作」。但，門檻這時候變得非常高&#8230;</p>

<p>我身處在這個火熱的軟體圈子，時不時的就會接到很多軟體獵頭信（國內外都有）。不少的 offer 都相當好，只是囿於時空背景，無法接受邀約。最後，他們也總會希望我推薦幾個優秀的人才，因為想進入台灣拓展分部，而他們都願意給的起非常非常好的 pay。</p>

<p>這不是偶爾才發生的特例，我一天到晚都在接到這種的詢問信…</p>

<p>但我卻總是只能愛莫能助。因為能夠介紹的優秀人才不是正在「替代役」，就是正在「念碩士班」準備「替代役」，或者是根本還沒當兵（年紀太小或太老正在閃兵役）。</p>

<p>而對方也沒辦法接受，收進來的工程師 27,28 歲技術還是很菜的 junior ….（因為這個年紀，在外國都應該要是 Senior Engineer 或 Architect 了）</p>

<p>矽谷蓬勃的軟體生態，在於優秀的人能夠在各個公司靈活流動，把各個公司優點有效的交互傳播。同時，因為沒有誰被簽約綁死的問題，所以人才可以不用浪費大量時間在放空等出獄，想換領域鍛鍊就換領域。三年的鍛鍊就變成架構師，根本不是不可能的事。</p>

<p>只要有天份，只要沒被綁死，幾年內都有機會鍛鍊出萬丈光芒。你也許說不是每個人都拿的到外國的好工作。第一年當然不太可能。但是第三年，誰能曉得會發生什麼事呢？</p>

<p>但是我們的社會觀念卻是，把流動視為不成熟。把綁架回來互相浪費看成保障。</p>

<p>你要怪世界進步的太快，我們追不上。怪政府無能，拖累國家競爭力。我卻認為是我們自己活生生憋死了自己。卻還在找替罪羊。</p>

<h4>3. 不要自願關在一份你根本不喜歡做的工作，下班再找機會作喜歡的事</h4>

<p>要是我能從出社會的幾年來，得到的最寶貴教訓，無非是這一課了。</p>

<p><strong> 千萬不要白天去作完全不喜歡而且沒熱情的工作（即使薪水看起來還不錯），晚上再用閒暇時間找機會作自己有熱情的事。</strong></p>

<p>也許你聽過了很多，熱血車庫創業，下班努力扭轉人生的故事。想要努力自己說服自己你也可以…</p>

<p>我不想直接潑你冷水笑你這根本是在做夢。</p>

<p>直接來說說自己的故事好了。</p>

<p>我出社會之後頭兩年，也有這種美麗單純的幻想。當時也是選了一個我沒有太討厭沒有太喜歡，但上班時間規規矩矩做事。晚上可以有很多時間「偷玩」自己喜歡的東西（寫部落格、寫網站）的工作，而且最重要的，這個工作還是一份鐵飯碗&#8230;（半公家機關，符合我家對我的期望）。</p>

<p>直到兩年的某一天，碰上一個技術遠高於我卻大我沒幾歲的前輩。才意識到原來當初這種這種想法簡直是自 high，是在自毀長城。</p>

<p>人家每天上班八小時都在玩自己喜歡的東西。我每天下班還要努力擠才有兩小時可以進行業餘可笑的練習。不要說綻放光芒了，光是要追上他，我要努力到什麼牛年馬月 -_-？</p>

<p>那個禮拜過後我馬上就辭職了。</p>

<p>我還沒有時間馬上想清楚我未來要幹什麼。但我很清楚的知道一件事：再這樣繼續下去，很快我就會被我自己挖的洞埋掉。</p>

<p>一兩個禮拜以後我跑去找了一份我應該有興趣的工作開始幹，就是職業的網站工程師，</p>

<p>四年過去了…</p>

<p>四年過後我站在這裡。這一路上經歷過的事簡直遠超乎我的想像。我蓋出來的網站、我的部落格文章讀者不計其數。我經歷了很多各種好笑、感動的 event（你可以 google 到一大堆）。我透過網路，結交到了一大堆沒見過太多面，卻很交心的朋友。我在我這個年紀，玩到了超過正常人應該玩過的網站專案數量。在奇怪的年紀當上資深經理。在完全沒心理準備的情況下拿到世界賽首獎。</p>

<p>對一件事情有熱情真的是一件很可怕的事情。</p>

<p>我在這個奇妙的旅程中發現一件鐵律：有熱情的事情你才有動力把它做得好。而做得好，就很容易
生出成就感。而這個成就感又會激起你更大的熱情，把事情做得更加好。而一旦你把某件事情做得無人能敵，奇妙的機會就會自然從天上掉下來。</p>

<p>從前不知道怎麼敲門得到的機會。會在幾年後的某一天，以意想不到的方式掉在你面前。而因為身上的技術已經不再是僥倖。所以就算這個幸運可能是意外，也能夠牢牢的被抓在自己手中，不再溜走。</p>

<p>有些人總覺得我總是能得到的奇妙的幸運，或者是到底哪來的這麼無窮詭異的毅力在充實自己。我只能告訴你這是熱情。我喜歡作這件事不只是每天的 8 小時。我每天花的時間是 12 小時。甚至是週末還把這件事情當娛樂。</p>

<p>所謂「一萬小時的威力」並不只是個噱頭而已。他是真的會產生 something 的，而且這個 something 無窮巨大。</p>

<p>要是我當年選擇了繼續作這一份沒有溫度的工作。什麼事情都不會發生。因為我一輩子可能都只會是一個業餘工程師。只能繼續躲在角落酸別人，他是幸運他是幸運…</p>

<p>我不知道為什麼在台灣的大家都有一種奇怪的執念。要是經濟有虞就算了，無虞也要逼自己作自己不喜歡做的事情。再說服自己其實下班可以再擠時間偷做，然後這樣總有一天就有機會出頭。</p>

<p>我學到的唯一一件事，就是喜歡的事情就絕對不要當業餘。一個月的職業訓練，就足足幹掉三年的業餘偷練。而把一件事情做到真正好，上天會讓接下來的一切順理成章出現…</p>

<p>如果你只是為錢作一件你完全不喜歡做的事，相信我，你真的會每天活得就好像在地獄裡。而給你再多 pay 當補償還是一樣，因為下班為了發洩情緒，你還是會選擇把它狠狠花光。但相反地，要是你正在做的事情是喜歡的事，其實收多少 pay 你可能根本也不在意。而且，當你喜歡到能夠把這件事情做得非常好。那麼那個數字上天是不可能少給你的。</p>

<h2>小結</h2>

<p>這兩天寫了這麼多字下來。我發現我自己也遠遠寫超過了未畢業的大學生可能看得懂的範疇。但無論如何，我還是想把這些悶在心裡很久的話寫出來。</p>

<p>即便冒著被人罵邪道的危險。我試圖告訴大家，其實</p>

<ul>
<li>(1) 可以不需要念大學</li>
<li>(2) 替代役可能不是幫你解套，而是有可能斷了你無限未來的一條路</li>
<li>(3) 熱情比什麼都重要</li>
</ul>


<p>最起碼我想拿我自己來說，應該可以看起來應該是一個很難被挑骨頭的例子吧。我是一個普通家庭出來的普通小孩，大學念的也是大家看起來很普通的系（甚至可以被人說不好的學校）。而一直到 24 歲之前，我都按照著普通家庭對我的普通期望，過上一個非常普通的人生。</p>

<p>唯一的不同，就是我在 24 歲以後開始想清楚了，我不應該再為了滿足別人的表面期待去過我的人生，眼前可以走的路，也不是只有政府和爸媽所說的那幾條路而已。然後我就這麼出發了。</p>

<p>而我在這個旅途中，也看到現在世界是長什麼樣的。這也是為什麼我寫了 <a href="http://blog.xdite.net/posts/2012/10/23/some-advice-for-undergraduate/">三個要學習的技能</a>、<a href="http://blog.xdite.net/posts/2012/10/25/another-advice-for-undergraduate/">三件不要去做的事</a>。</p>

<p>（1）世界正在以越來越快的速度再演化。快到現在任何的國民教育完全跟不上的階段。從前必須要上高等教育才能修到的學分，現在都可以透過網路越來越容易的取得這些知識，甚至超越本國大學可以供應的範圍。而從正規大學取得的知識，從前在畢業後還可以保值個兩三年。現在可能還沒出校門口就直接過期了。</p>

<p>是不是要花上這個四年取得越來越被廉價化的學歷，坐上四年根本沒有人喜歡的大學牢，背上你潛意識裡面覺得根本不應該背的大學學貸。我覺得這是可以思考的事情。</p>

<p>(2) 我們爸媽的時代，跟我們身處的時代，其競爭以及變化的程度，完全不可同日而語。這十年間科技的變化程度大家也看到了。而這個速度只有可能更快，而不會更慢。所以是否真的有那個價值繼續依照爸媽陳舊的建議悶著頭走一條「放空的路」？</p>

<p>很多人總是說，台灣的人才素質很高，但卻很奇怪的沒有辦法在世界上綻放光芒。某種程度上，我認為就是因為我們長期以來雖然「聞」到世界正在劇烈的變化，卻還是悶著頭走著一條老早過期的路，但還是期望著會有一個比別的國家更好的結果。</p>

<p>我們社會繼續用著奇怪的迷思，把未來有希望的孩子，一一推進黑洞裡。（不用說推，很多人甚至根本是搶著自己跳進去。）幾年後發現不對了。才在電視政論上抱怨以及檢討為什麼高等教育廉價化，為什麼花了四年書只有 22k。為什麼我們的國民素質高，但是長期競爭力低落？</p>

<p>(3) 但隨著世界交流的門檻逐漸降低。取得國外的工作機會真的沒有那麼難。而且就以我身處的網路業來說，隨著全世界的軟體缺工潮，英文還可以的 Senior Developer 簡直人人都搶著要。</p>

<p>(我所在的這個圈子，美國矽谷挖美國其他州的人，美國挖加拿大的人，加拿大挖日本的人，日本人挖中國的人和台灣的人。大家到處互相挖來挖去。因為缺工&#8230;)</p>

<p>這世界機會簡直是太多了。完全不是只有「澳洲屠夫」才能真正賺得到錢。每當只要電視上報導，念完大學畢業，結果只能到別的國家「打工度假」賺錢當台勞（明明是國家培養的高級知識人才，卻選擇跑去用勞力賺錢）。我內心就真的只有「國家的教育資源又泡湯了」的感想…</p>

<p>學弟妹在我演講結束後，曾跑來問我，到底我們這個科系的學什麼技能才有求職競爭力。我給了他們一個他們沒有意料過的連結：<a href="https://jobs.github.com/positions">Github Job board</a>。而不是 104 …</p>

<p>多逛逛這裡，你就會知道練什麼技能是值得投資，而且也是大家需要的。</p>

<p><strong> 看世界，不要只看台灣。</strong></p>

<p>我想我這兩篇文章，要說的可能從頭到尾就只有這九個字&#8230;&#8230;</p>

<p>===</p>

<p>順便插播廣告：</p>

<p>Facebook Hack Meetup Taiwan 即將在 11/4 (日）下午舉辦第一次 Local Meetup 以及演講分享。這次演講將會邀請 FB World Hack 台北站的得獎者分享經驗以及舉辦座談。</p>

<p>地點將會在 倉庫藝文空間。歡迎大家踴躍報名！（入場費 300 台幣）</p>

<p><a href="http://www.meetup.com/Facebook-Hack-Meetup-Taiwan/events/87703602/">http://www.meetup.com/Facebook-Hack-Meetup-Taiwan/events/87703602/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[給尚未大學畢業的朋友的幾個人生建議 - 能力培養篇]]></title>
    <link href="http://blog.xdite.net/posts/2012/10/23/some-advice-for-undergraduate/"/>
    <updated>2012-10-23T21:10:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/10/23/some-advice-for-undergraduate</id>
    <content type="html"><![CDATA[<p>前天，應母校 <a href="http://www.sam.pccu.edu.tw">文化大學應用數學系</a> 的邀請，再次回系演講關於大學後的職涯規劃。這已經是第二次受邀演講相同的主題。受邀的原因相當單純。純粹是我的表現一再的讓系上老師跌破眼鏡，在短短數年間一路從不起眼的小職員，迅速累積出社會普世價值觀上相對可觀的成就。( T客邦技術部經理、HTC 資深經理、Facebook World Hack Grand Prize…etc.) 所以老師們想邀請我回校演講。分享我在這一路上成長的感想，並給予學弟妹人生建議，回答對於對於將來路上的一些疑惑。</p>

<p>會後的問題，我一路上其實在各大場合都答過類似的問題。內心對於大學生缺乏適當明燈指引，相當感慨。有些問題我想甚至可能只有我這樣的經歷的人，才可能答的出來。這些建議我覺得若只限於在校學弟妹才能聽到，相當可惜。所以趁記憶猶新，把它整理出來。</p>

<p>當然，這只是基於我的人生經歷，做出來的建議。並非絕對，還請讀者自行判斷斟酌。</p>

<h3>最值得投資的技能</h3>

<h4>1. 中文速讀</h4>

<p>我最常被問到的問題其中有一個是：「你覺得出社會前你練過最值得的技能是什麼？」對於這個問題，我的答案毫不猶豫的會是「中文速讀」。</p>

<p>為什麼是「中文速讀」？坦白說，在小時候會選擇投資這個技能，原因純粹是 (1) 被逼 (2) 我有天份 (3) 可以在短時間看完一堆雜文小說很爽。</p>

<p>18 歲前，「速讀」這個技能對我來說，是可有可無的雞肋。但是在 18 歲以後，遇上網際網路的高速成長，整個世界呈現一個「資訊爆炸」的狀態。原先的雞肋技能，搖身一變成為我一路上闖蕩的最厲害武器。</p>

<p>原本我個人學習的速度，還被大大牽制在老家附近的書店販售書種的數量。因為網際網路的爆炸性成長，我的閱讀視野一下子被拉到網際網路的邊界。而高速的閱讀速度，即便在資訊爆炸的今天，我還是能夠只花上極少時間，就能夠輕鬆追完今日關注 timeline 上的大小事…</p>

<p>工作上遇到任何疑難雜症，也能透過閱讀速度以及網際網路，快速的整理出相對應的解決方案。</p>

<p>如果時間只能投資在一個專業技能上，我毫不猶豫會推薦你選擇「中文速讀」。</p>

<h4>2. 英文能力</h4>

<p>其次，我推薦練習的技能就是「英文能力」。每當學弟妹聽到我這樣說，無不哀號遍野，瞬間卻步。</p>

<p>其實，學弟妹不知道的是：所謂的「英文能力」真的非常非常重要。重要到超乎你想像。我出社會到現在的感想是，「英文能力」的重要性也遠超乎我當年的想像。</p>

<p>不只是所謂好的工作需要英文（外商工作需要聽說讀寫）。甚至是幫助你高速成長，超車過同儕的專業知識也通通都是英文 (如同我現在賴以為生的專業技能： Ruby on Rails )。就別說這麼專業的進階知識好了。</p>

<p>就連外國的許多線上初階自助學習課程：<a href="http://codeschool.com">CodeSchool</a>、<a href="http://www.codecademy.com/">Codecademy</a>。也都是英文教材。</p>

<p>其實台灣不乏素質高的軟體人才、學生。其實只要正確的導引，具備適當的教材與練習，成果往往能突破目前國民教育造成的限制。唯一可惜的是，大家往往只要聽到「是英文的」，下意識就刪掉這個選項。我一直覺得這是一件可惜的事。</p>

<p>很多學弟妹也許會期待，將來這些東西有天會有好心人出中文版。就我的觀察，這個機會可能是越來越小。目前的現實是：這個世界呈現高速成長中，能夠翻譯這些知識的人，往往也是能夠少數能夠突破天際線以及國際限制的人。他們目前的聚焦，無不是專注在自身能力與事業的突破。很少能夠還有資源和時間能夠停下來拉別人…</p>

<p>於是造成了一個極端的現象：強者越強，弱者越弱。甚至就算強者有心停下來救別人，有時候往往也不知道怎救起&#8230;</p>

<p>大家對於「英文學習」的盲點，在於英文學習很枯燥，無法靜下心來投資一個「不知道有什麼報酬率」的知識。</p>

<p>其實各位可能不知道的是：在大學之前，我的英文能力也非常非常的弱，每次段考都只有 30 分。但是我現在的英文能力，卻能讀聽能說能寫（哈，抱歉，有時候 blog 還是一堆 typo 錯字）。跟外國人順暢的聊天和工作的能力我應該還算是不錯的。</p>

<p>如今我具備的所有專業知識與能力，甚至是得到的機運，也全部都是因為英文賺進來的。</p>

<p>現在回頭看，英文練得起來的原因，只是因為我的一個單純的小嗜好：「看美劇」。其實把英文練好並沒有那麼難。我雖然不喜歡「嚴肅的學英文」，但卻非常喜歡看美劇（含字幕）。劇情精彩是我當初被深深吸引的一個原因，十年來我看過不下千集美劇。</p>

<p>習慣美國人講話的速度，是我進步的第一環。習慣了聽美國人講話，自然腔調與口語速度就會自然而然接近美國人。聽說能力就自然起來了。</p>

<p>因為不害怕英文，在需要大量接觸英文的程式開發專業環境下，就會完全不覺得英文是什麼可怕的門檻。很快的，自己就會習慣「太平洋其實並沒有加蓋」這件事。</p>

<p>能夠接觸到的機會，看到的世界，就不會被所謂的「台灣洗腦電視台」蓋台進入無窮迴圈。（其實我已經接近十年沒有在看台灣新聞與連續劇了…）</p>

<p>我認知到的一件現實是，現在全球已經進入非常扁平化而且快速變革的激烈變化中。如果國家國力本身夠強，還抵的住這種變化的衝擊。但是台灣，在經過這四年政府無作為且大量惡搞的狀況下，本地機會迅速的惡劣、變小、變少。</p>

<p>如果不能夠把自己變成全球需要的人才，將很快的被這波洪流吞噬。如果你的英文能力不好，勢必只能是被吞沒的那一群人…</p>

<h4>3. 寫作能力與程式開發能力</h4>

<p>其三，我認為值得投資的部分是：「寫作能力」或者是「程式開發能力」。</p>

<p>每當我一提到這兩件事，也是很多人馬上會皺起眉頭。</p>

<p>但我一路上走來的感想是：我很高興能夠同時都把這兩塊能力練得不錯。而且是這兩個能力，才把我帶到今天這條路上。</p>

<p>（也許你認為我能夠拿到 Grand Prize of Facebook World Hack，是個程式奇才，其實我可以很清楚的跟你說：我明白自己不是寫程式的料。</p>

<p>我真正有狂熱興趣的是寫作以及作產品。我小學立志當作家或歷史學家。成為一個厲害的 Developer 從來不在我念大學之前的志願選項。</p>

<p>我只是喜歡作網站，我被迫去學 coding，去學有關 coding 的 everything，然後莫名其妙的就被迫站在這個領域的前端…
）</p>

<p>寫作能力與程式開發能力，帶給我的影響是：</p>

<ol>
<li><p>寫作能極大化的強迫把我沒有章法的思緒收斂在一起，當累積到能夠把想法準確的寫下來，並重複的寫到讓人家明白。最大的受益人其實是我自己，我透過寫作梳理以及掌握了整件事的來龍去脈。能夠把事情精準的重複，才是弄懂整件事。透過不斷的寫作可以大大強化「把事情想清楚」這方面的能力。</p></li>
<li><p>程式開發也是類似的事。Knuth 曾經說過 「A person does not really understand something until after teaching it to a computer」。電腦並沒有很聰明，它只能執行絕對有邏輯的事情。換句話說：你在教電腦事情的時候，其實是在釐清自己的思考與整件事的邏輯。沒有邏輯的事，你又如何期待可以被 work 呢？</p></li>
</ol>


<p>而培養寫作能力與程式開發能力，其實最大的好處不是培養出強大的邏輯核心能力群。而是產生出來的副產品：「文章」以及「程式碼」。</p>

<p>很多 Developer 常常怨歎，我也很有能力，為什麼沒有人要挖掘我？很簡單的道理，因為沒有人知道你作過什麼。沒有文章放在 Blog 上，沒有程式碼放在 Github 上，沒有可以實際端出的 project。光憑短短的幾分鐘面談，和洋洋灑灑履歷。誰能在這麼短的時間，知道你是不世出的曠世奇才呢？</p>

<p>如果你想要世界看到你，你必須要做的就是，主動站出來。</p>

<h3>小結</h3>

<p>現在的社會絕對不是爸媽從小告訴你的那樣：只要專注「上學唸書」，找份「穩定的工作」就能安穩一輩子的社會。相反地，這個社會正用以往沒有的速度，每半年每三個月就快速演化一次。</p>

<p>以具體的例子來說，就看看你身邊的電腦、平板、手機演化趨勢就知道了。2007 年之前有誰能預期到 Facebook 能夠演化成如此怪獸？</p>

<p>世界上的工作型態以及職務需求，也在這幾年間劇烈的變化。昨天在<a href="http://i-chentsai.blogspot.tw/2012/10/korea.html">蔡依橙醫生的部落格</a>上面看到這一段話：『至於台北，他們根本不想拿來比較。我們還在講古老的「四小龍」攀關係，人家已經在亞洲制霸的路上了。』</p>

<p>在台灣媒體的鎖國洗腦下，其實很多人不知道，台灣已完全從先進國家之林掉出去了。很多人以為選出馬英九，即使無能不做事，其實也不可能把國家害到多慘的境界。這真是大錯特錯，在 2007 年以前，台灣與世界的差距真的還沒有那麼大。2008 以後的這黃金四年，全世界都在往前衝，以每三個月一變的速度在進化，只有台灣還在原地沾沾自喜的原地踏步。四年過去了，我們國家以及人民的競爭力完全不知道掉到哪裡去。</p>

<p>我不是跑得很前面的人，我真的只是勉強跟著世界的速度一起跑而已。</p>

<p>很多學弟妹常直接希望我給他們一些將來就業方向上的建議，該選什麼學科好，該選什麼職業好。老實說，在這麼瞬息萬變的社會改變裡，我實在無法告訴大家，什麼職業絕對賺，絕對不會被淘汰。因為這種事已經很難繼續再被持續發生了。</p>

<p>但無論如何，至少我可以告訴大家，如何不被世界變化的速度甩開&#8230;.我認為這三項核心能力是至關重要的。無論社會再怎麼變，至少你還可以靠這三個核心技能維持個人的競爭優勢。</p>

<ul>
<li>中文速讀</li>
<li>英文能力</li>
<li>寫作 / 程式能力</li>
</ul>


<p>這一篇是關於「什麼技能建議學」。下一篇的主題我將談「什麼樣的決定不要作」。</p>

<p>===</p>

<p>順便插播廣告：</p>

<p>Facebook Hack Meetup Taiwan 即將在 11/4 (日）下午舉辦第一次 Local Meetup 以及演講分享。這次演講將會邀請 FB World Hack 台北站的得獎者分享經驗以及舉辦座談。</p>

<p>地點將會在 倉庫藝文空間。歡迎大家踴躍報名！（入場費 300 台幣）</p>

<p><a href="http://www.meetup.com/Facebook-Hack-Meetup-Taiwan/events/87703602/">http://www.meetup.com/Facebook-Hack-Meetup-Taiwan/events/87703602/</a></p>
]]></content>
  </entry>
  
</feed>
