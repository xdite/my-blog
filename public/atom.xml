<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blog.XDite.net]]></title>
  <link href="http://blog.xdite.net/atom.xml" rel="self"/>
  <link href="http://blog.xdite.net/"/>
  <updated>2013-07-01T03:18:02+08:00</updated>
  <id>http://blog.xdite.net/</id>
  <author>
    <name><![CDATA[xdite]]></name>
    <email><![CDATA[xdite@about.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Logdown Beta Plan 與 新功能 : Custom Doman, File Upload, Latex Support ...]]></title>
    <link href="http://blog.xdite.net/posts/2013/07/01/logdown-beta-plan-with-new-features/"/>
    <updated>2013-07-01T01:45:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/07/01/logdown-beta-plan-with-new-features</id>
    <content type="html"><![CDATA[<p>真是一個刺激的 Hack 週末。自從 <a href="http://logdown.com">Logdown</a> 在<a href="http://dev-xdworks.dev/posts/2013/06/17/logdown-blogging-things-markdown/">兩週前推出</a>，得到了不少好評，這股動力讓我們寫起 Feature 更加的賣力。</p>

<p>這個週末（是的。你現在看到這些功能，幾乎都是我們在週末寫的&#8230;.）， <a href="http://logdown.com">Logdown</a> 推出了更多功能以及 Beta Plan：</p>

<p>首先是</p>

<h2>Custom Domain ( Beta / Preinum required )</h2>

<p>大家期待已久的功能 Custom Domain 功能</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/xPnFPKoRoCAUfiVCLsHN_custom_domain.png" alt="custom_domain.png" /></p>

<h2>Octopres Import ( Beta required )</h2>

<p>可以把 原先的 Octopress 文章壓縮打包成 zip 後，無痛匯入 Logdown 裡面。我們預計在接下來的幾個禮拜測試 Wordpress 與 Movable Type 的匯入</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/wbO96xUlQQa0zHydnTKH_octopress_import.png" alt="octopress_import.png" /></p>

<h2>Custom Handle &amp; Custom URL</h2>

<p>支援原先的 Octopress URL</p>

<p>綜合 Custom Domain / Octopres Import  / Custom Handle &amp; Custom URL 這三項。基本上把 Octopress 搬過來應該沒什麼問題了&#8230;</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/vZwutL0lRhaBG4EjNJVU_custom_handle.png" alt="custom_handle.png" /></p>

<h2>File Uploader ( Beta / Preinum required )</h2>

<p>很多朋友一直在問的 File 上傳功能，我們在週末也完成了。目前 Logdown 支援 File drag &amp; drop upload, Flickr, Instagram, Facebook Photo, Picasa, Dropbox Upload!!!! （其實還有更多&#8230;）</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/2W7wmLLKSMurz9uVNFLF_file_uploader.png" alt="file_uploader.png" /></p>

<p>目前暫定 Beta 是 <code>100 mb</code>，Prenium Plan 會是 <code>10GB</code>。</p>

<h2>單篇 Markdown 下載</h2>

<p>如果只喜歡我們的 Editor 也沒關係，我們支援在 <a href="http://logdown.com">Logdown</a> 寫完再下載回家貼到 Octopress，但是如果你可以考慮 <code>搬家</code> 那就更好了。</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/lCabxuufTrGGuZ8rAMnt_markdown_export.png" alt="markdown_export.png" /></p>

<h2>匯出功能</h2>

<p>如果哪一天你不喜歡 Logdown 想搬回 Ocotpress 了，我們也提供了全站打包下載功能，會把所有的文章打包匯出，郵寄到你的 email 裡面。</p>

<p>目前的打包功能只有 Ocotopres Zip 匯出。我們預計在接下來的幾個禮拜測試與開發 Movable Type 的匯出。</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/y9qqzblpTQSxORrKdsRZ_blog_export.png" alt="blog_export.png" /></p>

<h2>更多 syntax ( Especially for Hacker and Scienist )</h2>

<h3>Octopress Style Code Block &#8230;</h3>

<p>是的，我們支援了 Octopress 特有的 code block 寫法，會有 Caption&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>``` css common.css.scss
</span><span class='line'>    @import "reset";
</span><span class='line'>
</span><span class='line'>  ```</span></code></pre></td></tr></table></div></figure>


<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/4Vy0B9xTmO9c5yipC3bs_octopress_code.png" alt="octopress_code.png" /></p>

<h3>Octopress old syntax</h3>

<p>我們目前 porting 了 <code>codeblock</code> 與 <code>img</code> ，預計還會再支援下一個更重要的 <code>gist</code> 功能，敬請期待</p>

<h3>Latex Support</h3>

<p>是的，我們喪心病狂的支援了 Latex 語法。你可以透過加入 <code>mathjax</code> 來顯示 Latex 語法。而且直接可以在預覽裡面看到結果！！！</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/oPSZt3J2RGCPzteMwaP6_latex_support.png" alt="latex_support.png" /></p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/yKncEngfSbKHrPe86QVK_latex_support2.png" alt="latex_support2.png" /></p>

<h2>後續計畫：Beta &amp; Preinum Plan</h2>

<p>這兩週我們收到不少朋友的鼓勵與支持，所以我們很認真嚴肅的決定將繼續維護這個產品，而不只是一個 Hackathon 的 pet project。我本人的 blog 部落格也會在近期之內就搬到 Logdown 上。</p>

<p><a href="http://logdown.com">Logdown</a> 之後將會有 Preinum 收費的計畫。我們預計的收費計畫將會是 49 USD / year。為了感謝這段期間參與測試的朋友，在八月底前升級 Beta Membership 在轉換為 Preinum 時，我們將只會收取 24.95 USD 的費用。</p>

<p><img src="https://s3.amazonaws.com/logdown-production/user/1/blog/1/post/1815/HfPyJ5Q3RcGe4OOmT4br_beta.png" alt="beta.png" /></p>

<p>以上宣布的這些 Advanced Feature，你可以在後台中找到<a href="http://logdown.com/account/settings/plan">升級頁面</a>，Upgrade 成 Beta 後進行使用。</p>

<h2>追蹤我們</h2>

<p>你可以透過這兩個管道取得 Logdown 的最新消息。我們也會在重大 Feature 推出時，寫信通知大家。</p>

<ul>
<li><a href="http://logdown.com">Logdown 官方部落格</a></li>
<li><a href="http://twitter.com/logdowninc">Twitter:@logdowninc</a></li>
<li>Support Email <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x6c;&#x6f;&#103;&#100;&#x6f;&#119;&#110;&#x40;&#x72;&#x6f;&#x63;&#111;&#100;&#x65;&#x76;&#46;&#x63;&#x6f;&#109;">&#x6c;&#x6f;&#x67;&#x64;&#x6f;&#x77;&#x6e;&#x40;&#114;&#x6f;&#x63;&#111;&#100;&#101;&#118;&#x2e;&#x63;&#x6f;&#x6d;</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[升級 Rails 4.0.0 停看聽]]></title>
    <link href="http://blog.xdite.net/posts/2013/06/27/upgrade-rails4-danger/"/>
    <updated>2013-06-27T01:22:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/06/27/upgrade-rails4-danger</id>
    <content type="html"><![CDATA[<p>TL; DR: Rails 4.0.0 有地雷，建議修完所有 depcrapted warning 再從 rc1, rc2 升級，不然會有大災難。</p>

<p>上個禮拜跟同事做了個 Markdown Blog Service Provider : <a href="http://blog.logdown.com">Logdown</a>。介紹請看<a href="http://logdown.com/pages/about">這裡</a>。Logdown 是用 Rails 3.2.13 寫的。適逢昨日 <a href="http://weblog.rubyonrails.org/2013/6/25/Rails-4-0-final/">Rails 4.0.0 釋出</a>，於是手癢癢就想幫 Logdown 升級…</p>

<p>上個月我曾經寫過兩篇文章：</p>

<ul>
<li><a href="http://blog.xdite.net/posts/2013/05/04/upgrade-to-rails4/">Upgrade 到 Rails4 的一些感想</a></li>
<li><a href="http://blog.xdite.net/posts/2013/05/04/rails4-new-feature/">Rails 4: New Feature, Better Syntax</a></li>
</ul>


<p>該踩的雷我都中過了，也知道怎麼 patch 常見的地雷，閃過去….</p>

<p>不過我膝蓋還是中了好大一箭…orz</p>

<h3>地雷一：強制 raise error</h3>

<p>Rails 4 改變最大的有幾個重點：</p>

<ol>
<li>拿掉 attr_protected，改用 strong parameters</li>
<li>scope 改用 -> {}</li>
<li>routes 建議大家棄用 match ，而用更精確的 get , post</li>
</ol>


<p>well, 在 4.0.0 版，如果你還在用 match 的話，Rails 除了 warning message 還會直接 raise error。網站會直接跑不起來，而不是像 beta 的向下相容。而且一些行為也會強制禁掉，如 Logdown 其實有兩個 <code>root :to</code>，其中一個跑 contraint 偵測是否有 user 而導到後台。</p>

<p>Rails 4 是直接禁掉這樣的 syntax 讓你跑不起來。</p>

<p>不過這個還算好的警告手段。直接爛掉雖然有點 annoying，但是你知道 patch 掉就沒有後遺症了&#8230;.</p>

<h3>地雷二：改變行為</h3>

<p>這件事我真的覺得最扯&#8230;.。但也可以預見未來可能有一些災難發生。</p>

<p>Rails 4 beta 建議大家 scope 改用 -> {}。並且有警告 Message 通知你必須改變，但撈出來的 query 還是向下相容，也就是執行結果是正確的。</p>

<p>Rails 4.0.0 版 建議大家 scope 改用 -> {}。並且有警告 Message 通知你必須改變，<code>但撈出來的 query 行為改變，也就是執行結果是錯誤的。</code></p>

<p>這件事讓到底有多嚴重，我的 <code>post.rb</code> 是這樣設計的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">AR</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span><span class="p">,</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而在 Logdown 的 Dashboard 裡面，我的後台 index action 是這樣設計的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span><span class="o">::</span><span class="no">PostController</span> <span class="o">&lt;</span> <span class="no">AC</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="n">current_users</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">recent</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>正常的行為，生出來的 query 是這樣的（撈出我本人的所有文章）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">11</span><span class="o">.</span><span class="mi">3</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`posts`</span> <span class="no">WHERE</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">`user_id</span><span class="sb">` = 3 ORDER BY id DESC LIMIT 50 OFFSET 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>到這邊都沒什麼問題。</p>

<p>本來我改好程式，在 local 測一測看起來沒什麼問題，（ Rails 4 最大的改動通常是 update_attributes 會需要修，query 通常不太需要修）…也沒 raise error。還好我今晚是先 deploy 到 staging 去測。deploy 上去差一點噴茶&#8230;.</p>

<p>我個人的 Dashboard 竟然出現了（全站文章） ……orz…..WTF…</p>

<p>在 local 重新測試才發現：</p>

<p>如果你沒把 scope 改成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">AR</span>
</span><span class='line'>  <span class="n">scope</span> <span class="ss">:recent</span><span class="p">,</span> <span class="o">-&gt;</span> <span class="p">{</span> <span class="n">order</span><span class="p">(</span><span class="s2">&quot;id DESC&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>那麼…在後台</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Account</span><span class="o">::</span><span class="no">PostController</span> <span class="o">&lt;</span> <span class="no">AC</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@posts</span> <span class="o">=</span> <span class="n">current_users</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">recent</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>生出來的 query 會長這樣</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Post</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="sb">`posts`</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="sb">`posts`</span> <span class="no">ORDER</span> <span class="no">BY</span> <span class="nb">id</span> <span class="no">DESC</span> <span class="no">LIMIT</span> <span class="mi">50</span> <span class="no">OFFSET</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>齁齁，所有條件失效，<strong>撈全站文章</strong>給你。簡單的 query 都這樣，複雜的 query 我不敢想像。（ -> { } 的新預設寫法席卷了一大堆設計，而且一堆 plugin 還在用 舊 query … ）我已經可以預見這會產生多大的災難了&#8230;.</p>

<p>重點是，你還不能回報這是 bug，畢竟人家都已經叫你換成 <code>-&gt; {}</code>，誰叫你不換勒？</p>

<h3>地雷三：管太多…</h3>

<p>我在 deploy 的時候，遇到 Asset compile 不過的狀況。sprockets 一直報錯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Asset</span> <span class="n">logical</span> <span class="n">path</span> <span class="n">has</span> <span class="n">no</span> <span class="n">extension</span><span class="p">:</span> <span class="no">README</span>
</span></code></pre></td></tr></table></div></figure>


<p>WTF，我從沒在之前的版本看過這個錯誤。在網路上搜尋了一下發現是這個 issue..:</p>

<p><a href="https://github.com/sstephenson/sprockets/issues/347">https://github.com/sstephenson/sprockets/issues/347</a></p>

<p>意思就是 sprockets 連你的 README 有沒有加 .txt 都要管啦 -_-。然後維護者不想修，叫大家自己去找 workround…</p>

<p>所以如果你的 <code>app/assets/javascripts</code> <code>app/assets/stylesheets</code> 下如果有沒有副檔名的檔案，compile 就不會過。你會想說 not big deal，自己改成多加 .txt 或 .md 就好了…</p>

<p>沒這麼簡單。一堆 3rd party 的 css / js ..不僅有 …..README…還有 LICENSE…還有 CHANGELOG….XDD</p>

<p>齁齁齁，感覺很精彩了吧。沒關係，這都可以加 .txt。頂多是 CSS / JS 界的 repo 這陣子會被 Rails developer 群騷擾而已。更精彩的是 Makefile….這到底是要怎麼閃 XD</p>

<p>( 剛剛網路上找 solution 看到一堆慘案 …)</p>

<p>Bower 已經身亡，這裡是<a href="https://gist.github.com/afeld/5704079">解法</a></p>

<h3>Summary</h3>

<p>如果你是從 Rails 4.0.0beta1 或者是 Rails 4.0.0rc1 升級，務必停看聽…</p>

<p>Rails 4.0.0 跟你想得很不一樣 …orz</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Logdown - Blogging Things with Markdown]]></title>
    <link href="http://blog.xdite.net/posts/2013/06/17/logdown-blogging-things-markdown/"/>
    <updated>2013-06-17T08:30:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/06/17/logdown-blogging-things-markdown</id>
    <content type="html"><![CDATA[<p><img src="http://logdown.com/images/logo.png" alt="" /></p>

<p><a href="http://logdown.com/">Logdown</a> 是週末跟三位朋友 zhusee, tonilin, chitsaou, 24hr 做的一個 Hackathon 項目。這是一個新世代的 Blogging Platform using Markdown。</p>

<p>身為 Dev Blogger，最讓我們困擾的一件事，就是難以使用 Wordpress 書寫排版技術文章。在找尋過許多替代方案後，我最後投入了<a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress/">Octopress</a>的懷抱。</p>

<p>只是 Octopress 並不是這個答案的終極解，因為 Octopress 還是有一些自身的小問題在：比如只能在線下使用 Markdown 編輯器寫作，再使用command line 編譯。有時候這變成一件很惱人的事，<strong>有個線上的 Web 編輯介面</strong>還是必要的。</p>

<p>若要讓某些文章一開始就是草稿模式也不是很容易，等等…</p>

<p>而一些 Non Geek （或者不是 Ruby 界使用者），在他們的電腦上安裝、運行 Octopress 也是不小的技術門檻。</p>

<p>種種原因最後讓我們開發寫出了 <a href="http://logdown.com/">Logdown</a> 這個平台。</p>

<hr>


<p>Logdown 有：</p>

<h3>優雅的書寫介面</h3>

<p>( 經過長期的研究，我們認為這樣的介面最符合 Markdown 的 preview 寫作）</p>

<p><img src="http://l.ruby-china.org/photo/1a203d099ed0353ea7a0dbb223c9c77d.png" alt="" /></p>

<br>


<p><img src="http://l.ruby-china.org/photo/46e8f102e4ad76ef4bffe4de36aacaf1.png" alt="" /></p>

<h3>支援 Markdown ( GFM )</h3>

<p>技術寫作者最愛的 <a href="http://github.github.com/github-flavored-markdown/">Github Flavored Markdown</a></p>

<h3>直結的 Meta 設定</h3>

<p><img src="http://l.ruby-china.org/photo/f3a05c2ed4b7836f8b75fa602aba3a6d.png" alt="" /></p>

<h3>支援 more 標記（繼續閱讀）</h3>

<h3>支援 Tag</h3>

<h3>支援 Dirty detect ( 避免寫作中誤觸離開）</h3>

<p><img src="http://l.ruby-china.org/photo/f41bdbc2cb0183b009a71da86de4485a.png" alt="" /></p>

<h3>漂亮的內建 theme</h3>

<p><img src="http://l.ruby-china.org/photo/a8518eeb98be3110ba50e8958538d558.png" alt="" /></p>

<h4>整合 disqus</h4>

<p><img src="http://l.ruby-china.org/photo/b66ff665aea95ebe286f525b1f2d4b59.png" alt="" /></p>

<h3>完整的 Facebook Opengrah</h3>

<p>等等&#8230;</p>

<p>Anyway 我們希望 <a href="http://logdown.com">Logdown</a> 的推出，能夠成為解決 Dev blogging 的實際方案。希望各位朋友能夠給我們一些 feedback，thanks。</p>

<p>這個 project 我們也許不久後將會放到 Kickstarter 上，希望變成一個 Longterm support 的項目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[電子出版] Rails 101 的兩年來的一些數據]]></title>
    <link href="http://blog.xdite.net/posts/2013/06/02/rails-101-some-data/"/>
    <updated>2013-06-02T23:00:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/06/02/rails-101-some-data</id>
    <content type="html"><![CDATA[<p><a href="https://leanpub.com/rails-101">Rails-101</a> 是我兩年前寫的一本 Rails 教學書，前身是我的 Developer 訓練教材 / 解答本。</p>

<p>不少想出書的朋友這兩年來問過我一些大大小小的相關問題，想一想乾脆趁改版作一次解答。</p>

<p>Q: 這一本書兩年來賣了多少本？</p>

<p>A: 接近 2000 本。</p>

<p>Q: 賺了多少錢？</p>

<p>A: 其實沒有仔細算過。因為這本書有時候賣 9.99，有時候特殊節慶我會特價幾天打對折。但總體來說，乘以最佳銷售狀況的 0.6 應該是個合理的數字吧&#8230;.</p>

<p>Q: 好像比紙本書好賺？</p>

<p>A: 看你怎麼想？出版社大概都是一刷 2000 本，預付版稅大概 5-7 萬元。技術書一刷也不會賣超過這個數量。看起來收入比給出版社出版高不少。但是你可能要考慮</p>

<ol>
<li>書是我自己排版輸出的</li>
<li>客服信是我自己回的</li>
<li>購物車系統&#8230;（呃，還好不是自己做的，不過月費 9 USD）</li>
<li>書的網站是我自己做的…</li>
</ol>


<p>這本書要付 RD xdite, 客服 xdite, 編輯 xdite, blogger xdite 不少錢&#8230;.所以 Author xdite 應該沒什麼賺。</p>

<p>Q: 自費出版的優缺點你覺得是什麼？</p>

<p>A:</p>

<h4>優點：小眾市場的書也能賣</h4>

<p>小眾市場導向的書也能賣。通常這種書出版社不願意出。但是卻有讀者願意要買，運氣好挑對主題就其實蠻賺的。我看 Leanpub 上有人寫 Larvel 的書就賣了 6000 多本…</p>

<h4>優點：技術書籍載體適合電子發行</h4>

<p>而且技術書籍的載體蠻適合電子發行，因為內容有時效性。</p>

<h4>缺點：排版技術門檻很高</h4>

<p>缺點就是排版系統不好搞。寫一本電子書，幾乎 90% 的時間不是在寫書，而是在搞定「該死」的排版系統（下一段會講到&#8230;）。而且當你的書裡面有很多程式碼時，就準備排到死吧 -_-</p>

<h4>缺點：書籍內容容易過期</h4>

<p>我這本書剛寫成時是 Rails 3.0.3。到下架時 Rails 版本是 3.2.13。</p>

<p>當中 Rails stack 有很多技術架構上的轉變，這些讓我在更新書籍時遇到很多麻煩，因為讀者都會想要我支援最新架構，但是有一些 stack 是很難寫進去的&#8230;.</p>

<p>（比如 rails 在 10.6, 10.7, 10.8 的安裝方法不一樣..orz）</p>

<p>但是其實更新書籍，排版很容易爆炸，所以我不是沒有寫好需要更新的內容，而是每次排版排到生氣我就想放棄了…orz</p>

<h4>缺點：書籍讀者認為「更新」是應當的。</h4>

<p>一般紙版的書籍，書一旦印出來了，內容就算過期，讀者會摸摸鼻子就算了。但是在電子書上，讀者會認為作者有需要更新內容的義務&#8230;.</p>

<p>而且應當是免費的 /_\</p>

<h4>缺點：讀者認為作者提供 pdf, epub, mobi 三種版本是理所當然的</h4>

<p>嗯&#8230;.雖然我買書時也希望別人都提供，但實際上，排版實在會搞死人啊 XD</p>

<p>Q: 你曾經用哪一些技術進行排版？</p>

<p>A:</p>

<p>(1) 最初我是用 Mac 的 Pages 寫作，但只能轉成 PDF，而且貼 code 很痛苦。</p>

<p>(2). 第二版我就改用 <a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a> 重新改寫。貼 code 變得很漂亮了，也有辦法寫一些註解，但是裡面的文字編排反而讓人很頭大…邊寫邊排是一個大挑戰</p>

<p>轉 pdf 需要自己 hack 一些 latex 的支援，因為 reStructuredText 當時並沒有考慮到 UTF-8 排版的問題，所以我花了不少時間在解中文內容輸出問題。</p>

<p>這一個版本我有順利同時轉了一個 epub 出來</p>

<p>(3) 在這中間我有試過幾套軟體（不一定是在 101 這本書上）</p>

<ul>
<li>a. <a href="https://github.com/progit/progit">Progit</a> 的排版軟體</li>
<li>b. <a href="https://github.com/kmuto/review">review</a> 達人出版會的排版軟體</li>
<li>c. <a href="http://www.jstorimer.com/products/working-with-tcp-sockets">Working with tcp-sockets</a> 用的排版軟體 <a href="https://github.com/fnando/kitabu">kitabu</a></li>
<li>d. <a href="https://learn.thoughtbot.com/products/13-ruby-science">Ruby Science</a> 用的排版軟體 (thoughtbot 自己拼出來的)</li>
<li>e. <a href="http://www.literatureandlatte.com/scrivener.php">Scrivener</a> 劇本寫作軟體</li>
</ul>


<p>個人覺得有用的是 c,d,e</p>

<p>在這當中踢到的鐵板多數是：</p>

<ul>
<li>軟體喜歡自己發明格式的問題。所以每換一個平台，內容等於要通通重排&#8230;</li>
<li>解決 latex 中文與相依性套件問題（轉 pdf 所需要的套件）</li>
<li>讀者靠北為何沒有贈送 .mobi 的問題</li>
<li>為何贈送了 .mobi 卻不支援七吋 kindle 排版的問題&#8230;.</li>
</ul>


<p>（我覺得自己真是毅力驚人，要是我不懂寫程式，可能老早就放棄了&#8230;..）</p>

<p>Q: 為何這次會選 Leanpub 發行？幹嘛兩年之內搞得這麼累，早用 Leanpub 不就好了&#8230;</p>

<p>A:</p>

<p>其實 Leanpub 一出來就想用了。只是兩年前 Leanpub 的問題是，(1) 不支援中文 (2) 不支援排 code (3) 不支援 coding tips。只能排排文學小書，所以很快就被 rule out 了。</p>

<p>這次會進場是因為最近有幾檔強檔 Ruby 新書，特別是 Rails 界聖經 <a href="http://blog.obiefernandez.com/content/2013/04/the-rails-4-way-beta.html">The Rails4 Way</a> 宣布在 leanpub 上發行…</p>

<p>要知道這本書可是 6-700 頁以上的超級程式巨作，如果他們排的動，那就表示應該沒什麼問題了&#8230;.</p>

<p>這次進場寫作，也發現意外的順手，所以就打算把早前寫完但放棄排版的書稿，開始搬上去了…</p>

<p>撰寫輸入格式接近 markdown，輸出格式則有 pdf, epub, mobi。能夠滿足讀者需求。</p>

<p>一本書賣 10 元，Leanpub 抽我 1 元。我覺得算是個蠻合理的數字。</p>

<p>Q: 你之前用什麼平台收錢？</p>

<p>A :
<a href="http://www.digitaldeliveryapp.com/">Digital Delivery</a> + Paypal。這個平台本身不抽交易，但每月使用費 9 USD。所以我的獲利會是每一本書被 paypal 抽的交易稅 + 每個月的使用費。其實算下來跟 Leanpub 其實差不多&#8230;.</p>

<p>Q: 你不怕電子書被盜版嗎？如何處理買書退費問題？</p>

<p>A:</p>

<p>寫書「真的」就是一半在作功德的事。其實在作者的立場，其實是希望書能被越多人看到越好。收入有個合理回報就好。</p>

<p>我也遇過跟人「借看」的讀者，最後覺得寫得不錯，寫信過來說自己重新補買的。這次雖然改版我送大家 100% 折價卷，但是也有讀者覺得全新內容很不錯，自己重新付錢補買的…誰知道呢？</p>

<p>至於退費問題，在網路上退費的原則通常是 45-60 天內無條件退費原則。不過其實在賣電子書的各位作者，其實都願意讓大家無限時間退費，只是超過了這個時間，paypal 刷退非常麻煩。所以最後大概都限制 45-60 天。</p>

<p>退錢也不會囉唆。反正不合期待大家都能理解。</p>

<p>不過大陸讀者申請退費數量是台灣的 10 倍這我必須在這裡講一下 XDDD</p>

<p>Q: 有沒有下載 PDF, EPUB, MBI 的數據？</p>

<p>A: 第一版沒有。但第二版有，Leanpub 有提供這個功能。直至剛剛，我這本書總已經發出大約 600 本。</p>

<p>數據如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>Metrics
</span><span class='line'>Book formats downloaded at least once per purchase
</span><span class='line'>97.9% of your readers downloaded PDF format.
</span><span class='line'>60.7% of your readers downloaded EPUB format.
</span><span class='line'>37.6% of your readers downloaded MOBI format.
</span><span class='line'>These numbers won't add up to 100%, as purchases include all formats.
</span><span class='line'>
</span><span class='line'>Book formats download profile
</span><span class='line'>34.9% of your readers downloaded PDF only.
</span><span class='line'>1.0% of your readers downloaded EPUB only.
</span><span class='line'>0.5% of your readers downloaded MOBI only.
</span><span class='line'>26.5% of your readers downloaded PDF and EPUB only.
</span><span class='line'>3.9% of your readers downloaded PDF and MOBI only.
</span><span class='line'>0.5% of your readers downloaded EPUB and MOBI only.
</span><span class='line'>32.6% of your readers downloaded all three formats.
</span></code></pre></td></tr></table></div></figure>


<p>我目前能整理出常見的內容和問題大概就是這些。對電子出版有興趣的朋友歡迎留言交流&#8230;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 101 改版：支援 Rails 4 與 Ruby 2.0]]></title>
    <link href="http://blog.xdite.net/posts/2013/06/01/rails-101-in-rails4-and-ruby-2/"/>
    <updated>2013-06-01T14:40:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/06/01/rails-101-in-rails4-and-ruby-2</id>
    <content type="html"><![CDATA[<p>我兩年前寫的 Rails 入門學習書籍 <a href="https://leanpub.com/rails-101">Rails 101</a>，這個月進行改版了。</p>

<p>主要的變動有以下：</p>

<ul>
<li>以 Rails 4.0.0 rc1 為範例</li>
<li>以 Ruby 2.0.0 為語言版本</li>
<li>全新的範例 （ Group 討論區 ）</li>
<li>Rails 4.0+ 起內建的新 feature 與 syntax 示範</li>
<li>這次的版本加入了，使用 helper / scope / method 「整理程式碼」</li>
<li>Rails 4.0 與主流 plugin 的 Hack 解法 ( devise &amp; strong parameters)</li>
<li>在時尚的寫書平台 <a href="https://leanpub.com/rails-101">Leanpub</a> 上架！</li>
<li>同時支援 PDF、Epub、Mobi 三種版本</li>
</ul>


<p>目前書籍的進度是完成了 65% 左右。（開發程式碼已完全 complete）</p>

<p>價格一樣維持在 9.99 USD。</p>

<p>慶祝改版 coupon : <code>ruby-taiwan-2013-june</code>  ( 5USD 折扣，到 6/15 為止)</p>

<h3>其他</h3>

<ul>
<li>書籍討論區 <a href="http://bumblr.io/groups/26">http://bumblr.io/groups/26</a></li>
<li>舊版讀者免費轉換：（皆已寄信贈送免費轉換 coupon）</li>
<li>舊版讀者如喜歡，歡迎重新購買一份支持我 XD</li>
<li>舊版 Rails 3 版本已下架…</li>
<li>其他書籍問題，請填表：<a href="http://xdite.wufoo.com/forms/ce-billing-support/">http://xdite.wufoo.com/forms/ce-billing-support/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why F2E should learn Rails]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/20/jsdc-2013-slide/"/>
    <updated>2013-05-20T13:34:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/20/jsdc-2013-slide</id>
    <content type="html"><![CDATA[<p>這是我前天在 <a href="http://jsdc">JSDC</a> 演講「Why F2E should learn Rails」。</p>

<p><a href="http://xdite.github.io/jsdc-2013-slide/">http://xdite.github.io/jsdc-2013-slide/</a></p>

<p>介紹了 Rails 內建哪一些 Feature 可以讓 F2E 工作時更上手。</p>

<p>對於 F2E 來說很重要的幾個工具與原則，其實 Rails 都內建好了。而且還額外提供順手的架構方便 F2E 整理專案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One assertion per test & DAMP not DRY]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/19/one-assertion-per-test/"/>
    <updated>2013-05-19T22:57:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/19/one-assertion-per-test</id>
    <content type="html"><![CDATA[<p>TL; DR : 寫測試兩個鐵律：一次只測一件事情、不要自作聰明幫測試碼 DRY。</p>

<p>最近跟著朋友 <a href="http://twitter.com/knwang">Kevin Wang</a>，現 <a href="http://gotealeaf.com">Tealeaf</a> (Ruby on Rails 線上教學公司) 教師，前 <a href="http://hashrocket.com">Hashrocket</a> 工程師，學習寫正統的測試。</p>

<p>找老師直接學下來，果然比自己抄一抄外面的 code ，寫出湊合測試，果然神速許多。</p>

<p>以往寫測試時最讓人迷惑的就是，如何才能測到恰到好處，一段程式碼幾十行，中間有的動作根本不知道要怎麼測，或者是寫了一大堆測試，還是會在某個執行點壞掉，結果測試碼寫到跟程式碼打架。或者是 case 很多，測了 一 在 二 爆炸，測了二，在三爆炸…寫測試寫到火大。</p>

<p>最近才開始領悟到要同時把「程式碼」和「測試代碼」寫好，其實真的很簡單。只是以前沒有機會「好好學」。</p>

<p>其實總歸來說：寫測試只要抓住兩個原則：</p>

<ul>
<li>「One assertion per test」</li>
<li>「DAMP not DRY」</li>
</ul>


<p>就可以解決 80% 的問題。</p>

<p>只是我以前從來就不知道這兩條原則不是寫好玩的（指選擇性遵守），而是寫測試的「鐵律」。</p>

<p>只要你嚴格守住第一條線「One assertion per test」，你的程式碼就會變得非常乾淨。守住第二條線「DAMP not DRY」，你的測試碼就會變得非常好維護。</p>

<p>這兩條用得很熟，你寫測試就再也不會迷惑，到底應該怎樣寫才算「測得對」。</p>

<h2>One assertion per test</h2>

<p>One assertion per test 講的其實是：一個測試必須只驗證一件事。這是什麼意思呢？</p>

<p>這是指就算是你的程式碼只有下面幾行的話</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@comments</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">comments</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>你也必須這樣拆開測</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describle</span> <span class="s2">&quot;GET show&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:comment</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:comment</span><span class="p">,</span> <span class="ss">:post</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;assgin @post variable&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span>
</span><span class='line'>    <span class="n">assigns</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">post</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;assigns @comments to @post.comments&quot;</span>  <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span>
</span><span class='line'>    <span class="n">assigns</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="n">comment</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;render show&#39;s view&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_tempate</span> <span class="ss">:show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>而不是擠在一起。如同下面這個測試。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describle</span> <span class="s2">&quot;GET show&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">)}</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:comment</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:comment</span><span class="p">,</span> <span class="ss">:post</span> <span class="o">=&gt;</span> <span class="n">post</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;assgin @post variable and assigns @comments to @post.comments and render show&#39;s view &quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:show</span><span class="p">,</span> <span class="ss">:id</span> <span class="o">=&gt;</span> <span class="n">post</span>
</span><span class='line'>    <span class="n">assigns</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="n">post</span>
</span><span class='line'>    <span class="n">assigns</span><span class="p">(</span><span class="ss">:comments</span><span class="p">)</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="o">[</span><span class="n">comment</span><span class="o">]</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">should</span> <span class="n">render_tempate</span> <span class="ss">:show</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>為什麼守著這個原則這麼重要呢？因為當你在寫類似以下程式碼時</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">urls</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="n">extract</span><span class="p">(</span><span class="vi">@post</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span><span class='line'>    <span class="n">urls</span> <span class="o">=</span> <span class="n">urls</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>    <span class="n">urls</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">url</span><span class="o">|</span>
</span><span class='line'>      <span class="n">link</span> <span class="o">=</span> <span class="vi">@post</span><span class="o">.</span><span class="n">links</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="ss">:url</span> <span class="o">=&gt;</span> <span class="n">url</span><span class="p">)</span>
</span><span class='line'>      <span class="n">link</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>就會下意識的改寫成</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:post</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@post</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="vi">@post</span><span class="o">.</span><span class="n">extract_links!</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">posts_path</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">:new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>針對 @post.extrat_links! 再寫一個 unit test，然後在 controller test 中 mock 掉。</p>

<p>一旦不這樣拆，你就會發現「非常難遵守」「One assertion per test」這條定律，更不用說也很難測。當一旦習慣寫 code 拆 method 時，你就會發現程式碼其實會一天一天更乾淨&#8230;.</p>

<p>而且你會猛然發現，以前那些「很難寫測試的code」，都是那些不喜歡拆 method 拆 class 的 code …</p>

<h2>「DAMP not DRY」</h2>

<p><a href="http://stackoverflow.com/questions/6453235/what-does-damp-not-dry-mean-when-talking-about-unit-tests">DAMP not DRY</a></p>

<ul>
<li>DAMP 是指 Descriptive And Meaningful Phrases</li>
<li>DRY 是指 Don&#8217;t Repeat Yourself</li>
</ul>


<p>這是什麼意思呢？</p>

<p>我發現大部分的測試很難改是因為，程式設計師寫 code 寫的最後的一個壞習慣 DRY。</p>

<p>等等？DRY 不是一個好原則嗎？</p>

<p>DRY 在寫程式時是一個很重要的好原則沒錯，它的作用是讓程式儘量好讀好（給人）維護。所以程式師設計在經過良好的寫程式訓練之後，下意識習慣性的在寫任何 code 時都給他 DRY 一下。</p>

<p>很可能就會寫出這樣的測試碼：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">alice</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">bob</span> <span class="o">=</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>    <span class="n">post</span> <span class="o">=</span>  <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">alice</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#xxx&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#yyy&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;#zzz&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>這，就，慘，了。</p>

<p>為什麼呢？在剛開始第一次寫這些 test case 的時候，你可能覺得這沒什麼問題，測試都會通過…不過當一個月之後，你的老闆叫你改一些功能的時候，比如說改 <code>#xxx</code> 好了，你可能要換掉 alice 這個 sample。這就慘了，一改下去 <code>#xxx</code> 是綠燈了，<code>#yyy</code> 與 <code>#zzz</code> 卻紅燈了。</p>

<p>這時候你就會很幹&#8230;.要去修一下 <code>#yyy</code> 與 <code>#zzz</code> 裡的變數，但是改著改著你卻發現要讓 <code>#yyy</code> 與 <code>#zzz</code>綠燈，其實有時候可能要連原先 <code>#yyy</code> 與 <code>#zzz</code> 的測試碼也要重寫…</p>

<p>然後你就會相當抓狂：改兩行，然後卻要修 60 行，越寫覺得寫程式碼和寫測試碼的邊界到底在哪裡？好像只有多做工&#8230;.</p>

<p>DAMP 的原則是要你，在寫測試時 CASE 寫的越清楚越好，甚至「多行重複」也沒有關係。也就是以上的程式碼我們應該改成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Post</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#xxx&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:alice</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:bob</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">alice</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#yyy&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:alice</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:bob</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span>  <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">alice</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#zzz&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:alice</span><span class="p">)</span> <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:bob</span><span class="p">)</span>  <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span>  <span class="p">{</span> <span class="no">Fabricate</span><span class="p">(</span><span class="ss">:post</span><span class="p">,</span> <span class="ss">:user</span> <span class="o">=&gt;</span> <span class="n">alice</span> <span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>它的原則是：開發者要儘量讓寫的每一個測試「環境獨立」。不要被其他測試環境變數的改變，也被影響到。</p>

<p>而且用 before，容易隱藏一些該被測試的 host，不容易 debug。這也是另外一個需要小心的地方&#8230;</p>

<hr>


<p>只要這兩條線你守得非常嚴，程式碼和測試碼就會越來越有水準。</p>

<p>至於防守警鐘在哪裡？</p>

<ul>
<li><p>只要你在 it &#8220;xxxx …. and yyyy&#8221; 裡面提到 <code>and</code> 這個字，基本上就表示你在一個 test 裡測兩件事。你應該開個 context 拆開繼續做成兩個 test，或者再拆一個 it 出來再寫一個 test。</p></li>
<li><p>只要你想要在 describe 裡面寫 <code>before</code>，可能就要小心你又在不小心 DRY 過頭破壞測試的獨立環境了。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linode 被 Hack 事件始末]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/08/linode-hacked-htp/"/>
    <updated>2013-05-08T00:49:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/08/linode-hacked-htp</id>
    <content type="html"><![CDATA[<p>TL; DR 版本：Linode 是躺著中槍的路人</p>

<p>上個月，Linode 被打下來，洩漏了一堆資訊。逼得很多人不得不換卡和換密碼。幾個小時前，在 HackerNews 的一篇文章揭露 Linode 其實是路邊的那個倒楣鬼，人家不是要揍他，而是揍他的客戶&#8230;</p>

<p>以下內容是基於 <a href="https://news.ycombinator.com/item?id=5667027">HN 上的一篇懶人包</a>翻譯，然後加上<a href="http://straylig.ht/zines/HTP5/0x02_Linode.txt">HTP 雜誌原文</a>裡的資訊。</p>

<p>故事是這樣的：</p>

<p>有個駭客組織叫 HTP，最近有個匿名組織假冒成另一個組織 &#8220;ac1db1tch3z&#8221; 想要挖他們的底（去挖 HTP 的 botnet）。HTP 非常不爽想要報復，後來他們查到這個匿名組織在用 SwiftIRC 這個 IRC 服務在聯絡。而 SwiftIRC 的 nameserver 放在 Linode..。</p>

<p>所以 HTP 想要把 Linode 打下來，hack 進 SwitftIRC 放後門，然後報復回去。</p>

<p>他們一開始直接打 Linode，結果 1day exploit 被 Linode 防下來了。但是，Linode 的域名註冊商 name.com 被打下來了。所以他們的計畫改成弄一個 transparent proxy，打算從中間攔下 Linode 的帳號密碼&#8230;。</p>

<p>=== 題外話 ===</p>

<p>不只 name.com 被打下來了。 Xinnet, MelbourneIT, and Moniker 也被打下來了。
這一波總共有 550 萬的 domain 被打下來..no kidding</p>

<p>=== 題外話結束 ===</p>

<p>本來計畫是這樣的，但是他們發現了一個更棒的洞，直接打下了 Linode &#8230;</p>

<p>這當然很 high 啦。他們當然直接拿下 SwiftIRC 開始種後門。更精彩的是，因為不少站台也放在 Linode，中獎的名單還有： Nmap, Nagios, SQLite, OSTicket,    <br/>
Phusion Passenger (modrails), Mono Project, Prey Project, Pastie, Sucuri, Hak5, Pwnie Express, Puppet, and oauth.</p>

<p>（都是一些超重要的站&#8230;）</p>

<p>但是，HTP 不知道的是，HTP 內部被 FBI 滲透了..因為 nmap.org 是個非常重要的站台（security scanner）。於是 Linode 很快就被 FBI 警告了 nmap.org 被打下來了。</p>

<p>於是，Linode 上其他站被 HTP 打下來的事，很快的也被知道了。這讓 HTP 的報復計畫來不及實現&#8230;於是 HTP 決定警告 Linode 至少在 5/1 不准講出去，否則 HTP 就會散佈這些他們拿到的這些敏感資訊（包括客戶資料以及信用卡資料）。如果 Linode 安靜的話，HTP 就會遵守約定刪掉拿到的這些東西。</p>

<p>=== 題外話 ===</p>

<p>敏感資訊包括 : 159000 + 信用卡資料，使用這名稱, $5 (我不知道是多少數量) 筆加密過的密碼，LiSH 使用者名稱，LiSH 密碼 「明碼版」 。還有 Linode 雇員 Login 帳號。</p>

<p>=== 題外話結束 ===</p>

<p>因為 HTP 打 Linode 本來就不是為了拿這些資料，而是想要打仇家。所以他們認為開給 Linode 的 Offer 已經算不錯了。如果他們不聲張，基本上就等於什麼事都沒發生。</p>

<p>但是！！Linode 還是公開了被打下的這件事（因為他們也被 FBI 逼著要公開，FBI 很明顯的不信任 HTP 會守約）。HTP 知道 Linode 其實被逼到一個很難自處的位置，於是也跟 Linode 達成了另一個協議，只要 Linode 在公告上說，經過分析之後發現打下他們的是 HTP。HTP 就會同意刪除當初拿到的這些資料&#8230;.（很多 Hacker 其實只是想留名）</p>

<p>HTP 被這樣偷搞很不爽，於是他們就在查到底誰是 FBI 的內鬼。最近終於找到了，他們打進了這個內鬼的電腦，並且打開了 webcam。正好清楚拍到了 FBI 正在對某個 HTP 成員背後下指導棋，然後這個人就被踢出了組織&#8230;</p>

<p>這是到目前的故事。不過這是 HTP 單方面的故事，信不信就隨你了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4: New Feature, Better Syntax]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/rails4-new-feature/"/>
    <updated>2013-05-04T15:28:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/rails4-new-feature</id>
    <content type="html"><![CDATA[<p>TL;DR : Rails 4 是一個溫和加強版的 Rails3，而且贈送了很多酷炫 feature，適合進場</p>

<p>上個月花了一點時間直接衝了 Rails 4.0beta1，利用 upgrade project 去熟悉整個 Rails4 新的架構。</p>

<p>若要我形容對於 Rails4 這次升級的感想的話，我會總結為兩句話 <code>New Feature, Better Syntax</code>。</p>

<p>相較於 Rails 2 -> Rails 3 幾乎是個毀天滅地的重新大改寫（i.e. 不管是 Rails 本身，還是使用 Rails 開發的 project），Rails 3 -> Rails 4 的升級及變更內容顯得溫和許多。</p>

<h2>Better Syntax</h2>

<p>Rails 4 這次的改進，許多都是吵了多年以來的折衷方案、或者是許多開發者對如何設計，始終各自有 strong opinion 的主題，都找到 best practices 而被一槌定音了。或者是一些一直以來大家覺得老是被逼著這樣寫，非常智障的設計，也都被改掉了…</p>

<h3>Routing</h3>

<ul>
<li>讓 Routing 更安全：新增了以 http verb 為 syntax 的寫法，如 get/post</li>
<li>支援 Rouring concern: 如果要幫不同的 resources 加上如同 :comments 這樣的 nested_resources 就不用一直再重複貼上</li>
</ul>


<h3>ActiveRecord</h3>

<ul>
<li>強迫 scope 的寫法要全面改成 proc / lambda：避免 eager-evaluated 出現的問題。</li>
<li>Relation#not：以往要寫出 not 的查詢條件，寫法讓人哭笑不得。</li>
<li>Relation#none：以往撈不出集合，是 nil，要回傳 [] 空集合要自己作..</li>
<li>Relation#pluck：可以輕鬆只摘出某些欄位，以及要自己手下 select…</li>
<li>Relation#unscope：避免 default_scope + order 產生的排序問題。（因為下 except 無法閃過去）</li>
<li><code>update</code> &amp; <code>update_columns</code>：update 會觸發 callbacks, update_column 不會，但是 update_column 無法送多個 params，於是必須只好用 sneaky-save 這個 solution 繞過。現在 4 直接支援 update_columns</li>
</ul>


<h3>ActionController</h3>

<ul>
<li>before_filter 更名為 before_action：就是正名&#8230;</li>
<li><code>respond_to do |format|</code> 拿掉 xml 以 json 取代：2013 年了，沒人再拿 xml 當 default API&#8230;</li>
</ul>


<h3>Security</h3>

<ul>
<li>拿掉 attr_accessible，改用 strong_paraments：去年 <a href="http://blog.xdite.net/posts/2012/03/05/github-hacked-rails-security/">Github 被打下</a>的事情鬧很大，Rails 的安全策略重新被檢討，於是最後社群討論出採用 strong_parameters 得這個 best practices。</li>
</ul>


<h3>Other</h3>

<ul>
<li>砍掉 <code>public/index.html</code> : 砍掉愚蠢的 publc/index.html，以往教 Rails 初學者第一課就是記得砍掉這個預設檔案，不然寫的東西都會看不到</li>
<li>add_flash_type ：以往警告訊息只有 [:notice , :alert, :error ] 三種類型，但是自從有 <a href="http://twitter.github.io/bootstrap/">bootstrap</a> 之後。大家習慣使用的是 [:notice , :warning, :error]。要套版時要一直手加 <code>, :flash =&gt; { :warning =&gt; "Oh no!" }</code> 是很智障的事，Rails4 開放自定義 flash types。(P.S. 這是我提的&#8230;)</li>
<li>mem_cache_store 換成 dalli：自從 1.9 出了之後，原先的 :mem_cache_store （memcache-client）會撞到 utf8 問題，於是大家都改用 dalli 作為 backend cache，Rails 4 的 :mem_cache_store 預設將改為 dalli。</li>
</ul>


<h2>New Feature</h2>

<ul>
<li>Model Concern / Controller Cern: 重複用到的 method使用 Concern 複用</li>
<li><a href="https://speakerdeck.com/xdite/turbolinks">Turboklinks</a> : 無痛自動 pjax。pjax 不難，只要你用 Rails4 …</li>
<li><a href="http://blog.xdite.net/posts/2012/09/02/cache-digest-new-strategy/">Cache Digest</a>: 採用 Russian Doll Cache Strategy，智能 cache 設計，以前多層 partial cache 的問題讓大家實在很頭大。</li>
<li>HTML5 input form helpers: 現在是 HTML5 的時代，開發時自然會使用很多 js plugin，如calendar plugin，但用傳統的 form object 去產生這些 field 實在很痛苦。Rails4 內建了 HTML5 input form helpers。</li>
<li>採用 jbuilder 產生 json : 生 json 可以採用類似生 rss 的方式寫 builder，真是驚訝這個 feature 現在才出現 ….</li>
</ul>


<h2>結論</h2>

<p>學 Rails4 最快的方式不是看書，因為總體而言，這次的升級並不是什麼大破壞。改良的 syntax 和好用的新 feature。反而應該會減少不少平常開發上的負擔。而學習 Rails4 最好的方式就是用勇敢在現有的 project 上，大方的開一個 rails4 branch 下去練習升。</p>

<p>不用花很多時間你就能感受到 Rails4 新 feature 帶來給你的好處…</p>

<p>// 警告：以上建議只針對 Senior Rails Developer。目前還有一些 gem 沒有 Rails4 版本。所以 project 升級有時候會遇到必須要自己 fork gem「手動升級/Hack」的狀況，不熟包 gem 者勿輕易嘗試。</p>

<p>這次內建的一些 feature，其實都還蠻有意思的，也許將來還會挑幾篇特別再寫幾篇文章&#8230;</p>

<h2>資源</h2>

<ul>
<li><a href="http://www.upgradingtorails4.com/">http://www.upgradingtorails4.com/</a></li>
<li><a href="http://blog.wyeworks.com/2012/11/13/rails-4-compilation-links/">http://blog.wyeworks.com/2012/11/13/rails-4-compilation-links/</a></li>
<li><a href="http://blog.remarkablelabs.com/2012/11/rails-4-countdown-to-2013">http://blog.remarkablelabs.com/2012/11/rails-4-countdown-to-2013</a></li>
<li><a href="http://www.edgerails.info/">http://www.edgerails.info/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rocodev 的技術部落格上線了]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/my-new-dev-blog/"/>
    <updated>2013-05-04T13:28:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/my-new-dev-blog</id>
    <content type="html"><![CDATA[<p>以後關於 Web 開發技術的東西，我會同步或 優先貼在 <a href="http://rocodev.com">Rocodev</a> 的 <a href="http://blog.rocodev.com/">官方 Blog</a> 裡面。</p>

<p>裡面除了我的技術文章之外，也會有我們優秀同事所寫的一些技術文章，如 <a href="http://blog.rocodev.com/posts/8-sublime-text-2-packages-for-rails">Sublime Text 2 Packages for Rails</a></p>

<p>歡迎訂閱！ <a href="http://feeds.feedburner.com/rocodev">http://feeds.feedburner.com/rocodev</a></p>

<p>P.S. Rocodev Blog 裡的文章不一定會 100% 與這裡的 Blog 文章 100% sync。</p>

<p>如 <a href="http://blog.rocodev.com/posts/11-dont-import-compass">SCSS 開發原則：禁用 @import &#8216;compass&#8217;;</a> 這篇我就沒有打算貼過來，所以建議各位兩邊都訂…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrade 到 Rails4 的一些感想]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/upgrade-to-rails4/"/>
    <updated>2013-05-04T13:27:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/upgrade-to-rails4</id>
    <content type="html"><![CDATA[<p><img src="http://www.upgradingtorails4.com/ipad_sized.jpg" alt="img" /></p>

<p>Rails4 在前天的 <a href="http://www.railsconf.com/">RailsConf 2013</a> 釋出 <a href="http://weblog.rubyonrails.org/2013/5/1/Rails-4-0-release-candidate-1/">Rails 4.0 RC1</a> 了，這也表示大家應該可以進場了。</p>

<p>上個月在 Rails 4.0 beta1 時為了練手感，把手上的一個中小 production 專案，也上了 rails4 branch。</p>

<p>大概有幾個感想：</p>

<ul>
<li><p><a href="http://www.upgradingtorails4.com/">Upgrading to Rails4</a> 這本書強烈建議要買，才 $15 USD，可以節省你不少 debug 時間。</p></li>
<li><p>升 Rails4 建議不只開 branch，也用 rvm 開一個 gemset 出來作，因為 gem dependency 變更蠻多的。</p></li>
<li><p><a href="https://github.com/alindeman/rails4_upgrade">rails4_upgrade</a> 要裝。這個 gem 蠻好用的..可以幫你掃 dependency 問題。事實上 Rails3 升 Rails4 最討厭的是 gem dependency tree，因為 Rails 3 已經出太久了（幾乎快兩年了吧)，很多 Gemfile 都強綁定 3 ，所以升 Gemfile 時會出現很多問題&#8230;</p></li>
<li><p>major gem，如 simple_form, devise, 幾乎都有 beta1 版，裝了就保證可以動。小的 gem 也幾乎都有 rails4 branch 可以 hotfix。(起碼我在 beta1 進場時遇到的問題就幾乎都有解，所以在 rc1 的狀況應該會更好)</p></li>
<li><p>這次 Rails4 的改動，我個人的感想會是 Rails3 的 New Feature, Better syntax Version。如果平常 code 都寫的蠻漂亮（接口和封裝乾淨）的話，升級應該是沒有太痛才對。唯一讓人很煩的就是 gem dependency 解不完，還有牽扯到 scope 與 query 的部份幾乎都要重寫..:/ （目前是都還跳 warning 而已，但真要清 warning，如果 model 裡面 condition 很多，真的會清到手快斷&#8230;）</p></li>
<li><p>有關於 New Feature 與 Better syntax 這個議題，我應該週末會寫一篇出來..</p></li>
<li><p>Rails project 的本體內容物是沒有改動太大，但大家拿來 build gem 的 internal API 改不少，這也難怪 Jose Valim 這一兩天也同步釋出了 <a href="http://pragprog.com/book/jvrails2/crafting-rails-applications">Crafting Rails Applications (2nd edition): Expert Practices for Everyday Rails Development</a> 第二版的 beta。我這幾天改 gem 要升 Rails4 也是中了一堆 api 變更的地雷…</p></li>
<li><p>會逼大家都改 gem 的原因是因為是，連 migration api 都改了，所以只要提供產生 migration 的 gem 通通會逼要升 Rails4，真是個好招 -_- （連我只有兩個 commit 的 AutoFacebook gem 也不能倖免。解法在<a href="https://github.com/xdite/auto-facebook/commit/2e21a3fd1884c6eec7856b849d811b1d9b168502">這裡</a> ）</p></li>
<li><p>Obie Fernandez 前天也宣布了 Rails 聖經 <a href="https://leanpub.com/tr4w">The Rails 4 Way</a>開始 beta。值得注意的是他這次是使用 <a href="leanpub.com">Leanpub</a> 釋出書籍的 beta，而非走 <a href="http://www.informit.com/">Informit</a> 的 RoughCut 版本。</p></li>
<li><p>為什麼我有時間測這些東西？好問題，我也不知道…明明最近就忙到快死了&#8230;orz</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Helper 與 Bootstrappers 開始支援 Rails 4]]></title>
    <link href="http://blog.xdite.net/posts/2013/05/04/bootstrap-helper-yu-bootstrappers-kai-shi-zhi-yuan-rails-4/"/>
    <updated>2013-05-04T13:24:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/05/04/bootstrap-helper-yu-bootstrappers-kai-shi-zhi-yuan-rails-4</id>
    <content type="html"><![CDATA[<p>我寫的兩隻 gem <a href="github.com/xdite/bootstrap-helper">bootstrap-helper</a> 與 <a href="https://github.com/xdite/bootstrappers">boostrappers</a> 目前都釋出 Rails4 版本了。</p>

<ul>
<li>gem install bootstrap_helper -v 4.2.2.1</li>
<li>gem install bootstrappers -v 4.0.rc1</li>
</ul>


<p>有任何問題，請回報到 Github 上的 issues 上。</p>

<p>Boostrappers 是針對我在 2013/03 月底測試 Rails 4.0.beta1 測出來的 solution 更換掉 gemset 的。目前應該是沒什麼大問題&#8230;</p>

<p>不過這次值得注意的是，Rails4 底層又換了不少 API，包括 generator 的 action 和 migration，所以為了 bnootstrappers 的升級，我被迫 release 了三隻 gem。</p>

<p>包括我之前寫的 <a href="https://github.com/xdite/auto-facebook">AutoFacebook</a>，也被迫出了一個 Rails4 版本。</p>

<ul>
<li>gem install auto-facebook -v 0.1.rails4</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 isis 作為 Hipchat bot 取代 Hubot]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/20/isis-replace-hubot-as-hipchat-bot/"/>
    <updated>2013-04-20T12:25:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/20/isis-replace-hubot-as-hipchat-bot</id>
    <content type="html"><![CDATA[<p>最近公司頻道從 <a href="http://blog.xdite.net/posts/2013/04/01/move-to-hipchat/">IRC 換到 Hipchat</a> 上面，本來也想要把 <a href="http://hubot.github.com/">Hubot</a> 也一起搬過去的。</p>

<p>但是 Hubot 的安裝真是惡夢，光是 node.js 版本和 npm 之間的 dependencies 就可以搞死人。我們公司現在又沒有專職的 SA，工具蠻多都是我自己下海寫的&#8230;.</p>

<p>最後想了一下，決定找一套在 ruby 下也很好開發的 hipchat bot framework。</p>

<p>最後找到這套 <a href="https://github.com/whitehat101/isis">isis</a>。因為<a href="http://rocodev.com">敝公司</a> 是 100% 靠 Ruby 吃飯的，所以瞬間就把寫 bot 的門檻拉到很低&#8230;</p>

<h3>掛上 hipchat bot 的方式</h3>

<p>因為 bot 是常駐在聊天室的，所以你必須要幫 bot 申請一個 hipchat 專用帳號。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">hipchat</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">jid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">DDDD_XXXXX@chat.hipchat.com</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Full Name</span>
</span><span class='line'>  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;password&gt;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">history</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">3</span> <span class="c1"># num of history fields to request</span>
</span><span class='line'>  <span class="l-Scalar-Plain">rooms</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">DDDD_room_name@conf.hipchat.com</span>
</span><span class='line'>    <span class="c1"># - DDDD_second_room_name@conf.hipchat.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>Bot 走 Jabber 通訊協定。Jid 和 Romm 的資訊在 <a href="https://yourcompany.hipchat.com/account/xmpp">https://yourcompany.hipchat.com/account/xmpp</a></p>

<p>jid 格式 <code>DDDD_XXXXX@chat.hipchat.com</code>，room 格式 <code>DDDD_room_name@conf.hipchat.com</code></p>

<h3>開發 / 掛上 Plugin 方式</h3>

<p>isis 的 plugin 撰寫很簡單。基本上只要到 <code>lib/isis/plugins</code> 多開一個 <code>class</code> 繼承 <code>Isis::Plugin::Base</code>，然後掛進 config.yml。
這樣就做好了&#8230;</p>

<h3>Local 測試</h3>

<p><code>bin/isis run</code> 就可以把 bot 跑起來了。而若要背景常駐要跑 <code>bin/isis start</code></p>

<h3>Deployment</h3>

<p>開發完畢推上 git 之後，要讓 bot 重開還要跑到 server 上跑 <code>bin/isis restart</code>。懶人如我當然覺得這很麻煩，所以我用 <a href="https://github.com/brentd/gitploy">gitploy</a> 和 Rake 檔寫了 autodeploy，跑 <code>rake deploy</code> 就會動了。</p>

<p>順便還參考 <a href="https://github.com/hipchat/hipchat-rb/blob/master/lib/hipchat/capistrano.rb">hipchat/hipchat-rb</a> 的 deploy 檔，做了 deploy hook 掛在 bot 的 deploy rake 上，這樣起碼有人 deploy bot 時大家會知道，以免 bot 被搞爛了沒人發現&#8230;。</p>

<p><code>config/gitploy.rb</code> <a href="https://gist.github.com/xdite/5424771">https://gist.github.com/xdite/5424771</a></p>

<p><code>Rakefile</code> <a href="https://gist.github.com/xdite/5424780">https://gist.github.com/xdite/5424780</a></p>

<h3>後記</h3>

<p>昨天後續還寫了幾隻常用 bot，比如說「午餐吃什麼 bot」、「redmine #issue_number bot」、「網頁自動抓標題 bot」。</p>

<p>不過這不是重點，重點是 bot framework 架好之後，禮拜五晚上同事們竟然不睡覺，一直在惡搞這隻 bot 瘋狂加功能&#8230;.XD</p>

<p>看起來 bot 的確可以玩出不少花樣啊&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何招聘技術人才，一點心得 [JD篇]]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/06/hiring-advice/"/>
    <updated>2013-04-06T06:10:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/06/hiring-advice</id>
    <content type="html"><![CDATA[<p>這是一兩個禮拜前貼在 <a href="https://www.facebook.com/xdite/posts/10151575386888552">Facebook 牆上的心得</a>。整理一下重貼在 Blog 上&#8230;</p>

<p>整理一下過去幾年的心得，如下：</p>

<h2>JD 部分</h2>

<h3>寫清楚 Job Description</h3>

<ul>
<li>寫清楚公司能提供什麼（薪資福利）</li>
<li>希望對方已經有什麼經驗？（已具備什麼技術，什麼職位就寫什麼）。</li>
</ul>


<h3>不要徵超人</h3>

<p>不要徵 「超人」。徵「超人」沒有意義。</p>

<p>這裡的超人若以 Web 界來比喻，就是你可能看到 JD 這樣寫「熟 Rails、熟 jQuery、熟 ORM、熟 API 設計、熟 OO Design、熟&#8230;.」</p>

<p>若一個工作職缺，出現「超人」的內容。通常表示：</p>

<ul>
<li>這個公司只缺一個人，就是做到死的超人。Developer 不是笨蛋，看了也知道雇主想幹嘛…</li>
<li>雇主不知道自己想徵什麼人。這對 Developer 來說也是危險訊號。</li>
</ul>


<p>如果你不是這種心態，是認真想招到合適的人。那麼請把需求寫清楚。</p>

<ul>
<li>如果團隊用 Git 很深，那麼寫上「會使用 Git」。</li>
<li>如果團隊用 Rails，那麼寫上「熟 Rails」。</li>
<li>如果團隊用 Rails，願意收 junior，那麼寫上「具備 MVC 開發經驗」。</li>
</ul>


<p>不要貪心寫得希望對方什麼條件都具備，這樣十之八九只會收到一堆充滿 BuzzWord (對方希望合你胃口嘛)的垃圾履歷，大大拖慢你篩寫出正確合適的候選人的速度。</p>

<p>必須要理解到一個現實，不是每個人一進公司，就有辦法馬上 pickup，寫一堆「熟OO」並沒有任何幫助。只要寫應徵此職位的「最低條件」即可。</p>

<p>舉例來說：因為如果對方不會 Git 你又不想 train 他 Git，你就要寫「會使用 Git」。如果你可以接受 train 對方 Git，只要寫「不害怕 Command Line」即可。不然寫一個「熟 Git」，雙方都不知道這到底是「熟」是要「熟」到什麼程度…</p>

<h3>不要請對方直接寫信到 jobs@mycompany.com</h3>

<p>通常這樣做的下場是，「你會覺得自己會收到一堆來亂的履歷」。這不是應徵者的錯，因為你沒告訴人家「你想看什麼樣的履歷」。</p>

<p>而且，不是人人都有辦法寫出「有重點」的履歷。</p>

<p>我建議的方式是乾脆設計一張表單，請對方照格式填。不需太制式，但你可以用這種方式引導對方把他自身的重點 highlight 出來。而且 fit 你的需求。</p>

<p>這樣可以節省你在看履歷時很多時間。</p>

<p>Appsumo 的 Noah Kagan 在 <a href="http://www.appsumo.com/~Q3_wb/">Learn Chief Sumo&#8217;s Proven Automated Hiring Formula</a> 也是用了類似的手段。只不過他做得接近自動化…</p>

<p>至於我們公司的 <a href="http://rocodev.wufoo.com/forms/job-apply/">應徵表單</a>，我是這樣設計的..</p>

<h3>把招聘啟示貼在正確的地方</h3>

<p>徵人公告只是一篇文章，你可以貼在任何地方。</p>

<p>但就我的經驗是，貼在你平常在混的社群裡就好，不要到處亂貼。高曝光率對招聘一點幫助都沒有。</p>

<p>怎麼說呢？這幾年下來，我發現共事過最棒的同事，或收過來看起來不錯的履歷。都是在社群裡面徵來的。不是在社群裡面原本就有見過面的，就是看我的 Blog 在徵才，寫信過來應徵的。再不然就是平常有在 Facebook follow 動態的人。</p>

<p>至於那些在其他地方看到徵才啟示寫過來的履歷。怎麼說呢？你真的會覺得他寫過來的東西「不合胃口」。</p>

<p>相信我，收到「很多」履歷，絕對也不是什麼好事&#8230;。因為最痛苦的往往不是你已經很忙了，卻招不到人。而是你已經很忙了，還要花上一堆時間過濾履歷；挑來面試的人，還瘋狂浪費你寶貴的時間…</p>

<p>Noah Kagan 在 <a href="http://www.appsumo.com/~Q3_wb/">Learn Chief Sumo&#8217;s Proven Automated Hiring Formula</a> 這篇其中的一個招聘技巧。也是建議不要到處亂貼，儘量把徵才啟示、通知放自己家產品的 Facebook Page 邊欄，或者是產品網站、產品通知信裡。</p>

<p>這些原本就認同你產品的人，有極大的機會 fit 公司 culture。而不是網路上的任意陌生人。</p>

<h2>其他</h2>

<p>這篇文章已經太長了。下次有空再來寫 interview…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把公司 Log 搬到 Hipchat...]]></title>
    <link href="http://blog.xdite.net/posts/2013/04/01/move-to-hipchat/"/>
    <updated>2013-04-01T22:19:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/04/01/move-to-hipchat</id>
    <content type="html"><![CDATA[<p>一直以來（ 5-6 年前開始..)，我都是用 IRC 在管團隊的 Log 和通知。</p>

<p>這個習慣最早以來是跟前輩學習來的。這在比較強悍的技術團隊內部，幾乎是行之有年的標準 Convention。</p>

<p>（ 可見 Flickr 著名的 <a href="http://www.slideshare.net/jallspaw/10-deploys-per-day-dev-and-ops-cooperation-at-flickr">10+ Deploys Per Day: Dev and Ops Cooperation at Flickr
</a> 投影片 (P.52)，不過他們大概 2006 年就開始這樣做了，這篇只是後來比較漂亮的整理&#8230;）。</p>

<p>當年 <a href="http://t17.techbang.com/topics/7181-t-off-state-technical-departments-magic-work-processes-open-to-the-public">在 T 客邦</a>，也是用 redmine + IRC bot 自己搞了一套。</p>

<p>把 Log 都打到 IRC 有很多好處。團隊成員去開會、或者暫時離開。回到電腦前，還是可以很快速的掌握剛剛發生了什麼事。再加上 issue tracking 或者是 system alert 其實是很洗信箱讓人容易分神的東西，所以我們把這些幾乎都搬到 IRC 上，建立出一個可以非同步但又高效率的合作開發模式。</p>

<p><img src="http://www.techbang.com.tw/system/images/56563/original/f619713e13061413515e24406f7fbe02.png?1312367582" alt="img" /></p>

<p><img src="http://www.techbang.com.tw/system/images/56564/original/a2c052c70ec3bfc1023c2660bfbf54b9.png?1312367582" alt="img" /></p>

<p>不過這個模式還是有一些極限，所以最近在 survey 過後，最近我決定把 <a href="http://rocodev.com">公司</a> 整套 solution 搬到 <a href="http://hipchat.com">Hipchat</a> 上。</p>

<h2>主要搬家原因</h2>

<ol>
<li>發現每個同事一進來都要教怎麼用 <a href="http://www.irssi.org/">irssi</a> + 工作站掛 irc，學習成本很高</li>
<li>公司聊天室是 skype, log 在 irc 上，開兩窗有點麻煩。加上 skype-bot 不是不能作，只是我覺得 skype-bot 很吵…</li>
<li>人員離職很麻煩，因為要把 irc room 的 key 和 info 整套換掉，無法作權限控管</li>
<li>demo 給別人看 irc solution 時也很麻煩，因為對方一定看得到我們的 key &#8230;.</li>
<li>對 irc 訊息上色要試很久，對一般的 developer 門檻有點高</li>
<li>irc log 多半要切到桌機才能看，沒有 mobile solution。</li>
</ol>


<p>所以最後就整套就搬到 <a href="http://hipchat.com">Hipchat</a> 了。看起來大家現在是用的蠻習慣的。</p>

<p><img src="https://fbcdn-sphotos-h-a.akamaihd.net/hphotos-ak-snc6/221729_10151576143483552_1020905528_n.jpg" alt="img" /></p>

<h2>Hipchat 的好處</h2>

<ol>
<li>主要是 Web Based，但有 iOS, Android, Mac, Windows, Linux client</li>
<li>有 group 和 permission control，踢人加人很方便</li>
<li>API 整合，寫 bot 很容易</li>
<li>聊天行為與一般 IRC chat 蠻相近的</li>
<li>貼圖貼檔案貼 Link 很方便</li>
<li>一樣會存歷史紀錄，就算離線了，重新上線還是可以找 Log</li>
<li>很多主流系統整合支援（ github, redmine, capistrano, airbrake….)</li>
<li>5 人以下現在是免費的方案…</li>
</ol>


<h2>Hipchat integration</h2>

<p>我們目前是把目前的幾種 Log 都打到 hipchat 上</p>

<ol>
<li>Github (github 的 hook 支援 hipchat, pull request, push , merge 都會通知&#8230;)</li>
<li>Capistrano Deploy <a href="http://blog.hipchat.com/tag/capistrano/">http://blog.hipchat.com/tag/capistrano/</a></li>
<li>Airbrake ( server error 通知系統, airbrake 支援 hipchat )</li>
<li>Redmine (官方的 hipchat/redmine_hipchat 不好用，所以我自己改了一隻 <a href="https://github.com/rocodev/redmine_hipchat">rocodev/redmine_hipchat</a> 出來)</li>
</ol>


<p>之後還會掛更多東西上去…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Audiophile.im 我是發燒友]]></title>
    <link href="http://blog.xdite.net/posts/2013/03/22/audiophile-dot-im/"/>
    <updated>2013-03-22T03:51:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/03/22/audiophile-dot-im</id>
    <content type="html"><![CDATA[<p><a href="http://audiophile.im" title="audiophile.im by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8227/8578633622_e80e1c395e_n.jpg" width="320" height="259" alt="audiophile.im"></a></p>

<p>因為最近在朋友 <a href="http://blog.gslin.org">@gslin</a> 的推坑下，開始玩起了耳機和 DAC…</p>

<p>因為這塊領域完全是個無底坑。預算有限下我打起了往 <a href="http://amazon.co.jp">Amazon Japan</a> 找耳機的主意，發現價差實在太大了…</p>

<p>因為 Amazon Japan 某些東西是不寄 Taiwan 的，要透過類似 <a href="http://tenso.com">Tenso</a> 這類的轉運服務寄回台灣。而 Tenso 是抓材積在算服務費以及 EMS 郵費。一隻一隻上 Amazon 查價錢和材積換算運費非常浪費時間。</p>

<p>查到煩了，想說自己寫個程式都比去按計算機快，最後就爆氣寫了一個查價系統。</p>

<p>最後就是這個網站：<a href="http://audiophile.im">Audiophile.im</a> 我是發燒友。</p>

<p>基本上網站的運作原理就是：幫你上 Amazon Japan 查你想要買的耳機價錢，並且抓到材積，根據材積算出轉運回台的手續費，最後換算成台幣。這樣你可以快速知道，想買的耳機和台灣賣的價格確切是差多少…</p>

<p>希望能幫大家省到一點錢。</p>

<p>當然，如果你還是希望有穩定的 support 和服務，我還是推薦你在台灣買，貴了一些但是有保障。我個人是蠻喜歡去 <a href="http://pincha.com.tw">品嘉</a> 就是了…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[We are hiring]]></title>
    <link href="http://blog.xdite.net/posts/2013/03/11/rocodev-is-hiring/"/>
    <updated>2013-03-11T18:56:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/03/11/rocodev-is-hiring</id>
    <content type="html"><![CDATA[<p>我們公司 <a href="http://rocodev.com">Roco</a> 最近要徵人。</p>

<p>我們是專業的軟體開發公司。主要技術為 Ruby on Rails。擅長敏捷軟體開發。曾經在 2012/9 參加 Facebook World Hack 奪得世界級首獎。具備優異的開發實力。</p>

<p>公司的業務最近還在不斷的成長。因此我們預計將再招募數位夥伴加入我們的團隊。</p>

<p>開放三種職缺。</p>

<h3>Software Developer</h3>

<ol>
<li>有過 Ruby / Rails 撰寫經驗</li>
<li>具有網站開發經驗</li>
<li>熟悉資料庫觀念</li>
<li>熟悉任何一套 Linux 下的 shell 操作 ( bash / zsh / csh 等等&#8230; )</li>
<li>有獨立解決問題或 Trouble Shooting 的能力</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>熟悉 HTML 標準</li>
<li>熟悉 CSS</li>
<li>熟悉 JavaScript / JavaScript Library ( jQuery) 的使用</li>
<li>熟悉 shell script</li>
<li>熟悉 vim / git</li>
</ol>


<h3>Web Designer</h3>

<ol>
<li>2 年以上的網頁設計經驗（曾在網路公司工作一年以上者佳）</li>
<li>熟悉 HTML / CSS 排版設計</li>
<li>略懂 jQuery</li>
<li>熱衷設計體貼流暢的使用者介面</li>
<li>熱衷做出讓人眼睛為之一亮的設計</li>
<li>不排斥學習任何新工具</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>熟悉 SCSS / 熟悉 Compass</li>
<li>用過 Fire.app</li>
</ol>


<h3>Fronted Developer</h3>

<ol>
<li>熟悉 HTML 標準</li>
<li>熟悉 jQuery</li>
<li>熱衷做出讓人眼睛為之一亮的使用者介面</li>
<li>對追求技術新知有熱情，並且具有團隊開發精神</li>
</ol>


<p>以下條件非必備，但為加分：</p>

<ol>
<li>開發過 jQuery Plugin</li>
<li>開發過 Backbone 應用程式</li>
</ol>


<p>===</p>

<p>若您覺得您是合適人選，或您覺得雖達不到需求、但有興趣挑戰嘗試這分工作，都歡迎<a href="http://rocodev.com/jobs">應徵</a> 。</p>

<p>====</p>

<p>同場加映。我們公司提供以下福利</p>

<ul>
<li>24&#8221; Dell 螢幕</li>
<li>舒適 Aeron 座椅</li>
<li>寬敞 Ikea Galant</li>
<li>每月無限量零食</li>
<li>不定期公司聚餐</li>
<li>Rails 前緣技術指導</li>
<li>線上學習教材贊助</li>
<li>技術研討會門票贊助</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013 Ruby on Rails Reading List]]></title>
    <link href="http://blog.xdite.net/posts/2013/01/30/2013-reading-list/"/>
    <updated>2013-01-30T08:13:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/01/30/2013-reading-list</id>
    <content type="html"><![CDATA[<p>Here are the reading marterials I recommend in 2013:</p>

<h2>Basic</h2>

<p>If you are new to Ruby / Rails world, I suggest you take following courses :</p>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/try-ruby">Try Ruby</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/try-git">Try Git</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/git-real">Git Real</a></li>
<li>Peepcode <a href="https://peepcode.com/screencasts">Meet Command Line</a></li>
<li>Peepcode <a href="https://peepcode.com/products/advanced-command-line">Advanced Command Line</a></li>
<li>Zed Shaw <a href="http://ruby.learncodethehardway.org/">Learn Ruby The Hard Way</a></li>
</ul>


<h2>Learning Rails</h2>

<p>Use following courses to build a simple application, like a &#8220;forum&#8221;</p>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/rails-for-zombies-redux">Rails for Zombies Redux</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/rails-for-zombies-2">Rails for Zombies 2</a></li>
</ul>


<h2>Basic web development</h2>

<ul>
<li>CodeSchool <a href="http://www.codeschool.com/courses/jquery-air-first-flight">jQuery Air: First Flight</a></li>
<li>CodeSchool <a href="http://www.codeschool.com/courses/jquery-air-captains-log">jQuery Air: Captain&#8217;s Log</a></li>
<li>CodeSchool <a href="http://www.codeschool.com/courses/css-cross-country">CSS Cross-Country</a></li>
<li>Codecademy <a href="http://www.codecademy.com/zh/tracks/javascript">Javascripts</a></li>
</ul>


<h2>Intermediate Ruby on Rails</h2>

<p>( If you are not familer with TDD with Ruby on Rails, these two books might be a good start)</p>

<ul>
<li>Michael Hartl <a href="http://ruby.railstutorial.org/">Rails Turtorial</a></li>
<li>Ryan Bigg <a href="http://www.manning.com/bigg2/">Rails in Action 4</a></li>
</ul>


<p>UT on Rails is also a excellent learning material</p>

<ul>
<li>Schneems <a href="http://schneems.com/ut-rails">UT on Rails</a></li>
</ul>


<h2>Testing</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/rails-testing-for-zombies">Rails testing for zombies</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/testing-with-rspec">Testing with Rspec</a></li>
<li>Noel Rappin <a href="http://pragprog.com/book/nrtest/rails-test-prescriptions">Rails Test Prescriptions: Keeping Your Application Healthy</a></li>
<li>Thougutbot <a href="https://learn.thoughtbot.com/workshops/18-test-driven-rails">Learn Test-Driven Development using RSpec and Capybara.</a></li>
</ul>


<h2>Advanced web development</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/journey-into-mobile">Jounry into Mobile</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/anatomy-of-backbonejs">The Anatomy of Backbone</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/coffeescript">CoffeeScript</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/assembling-sass">Assembling Sass</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/assembling-sass">Assembling Sass Part2</a></li>
</ul>


<h2>Refactoring Ruby / Rails code</h2>

<ul>
<li>Codschool <a href="http://www.codeschool.com/courses/rails-best-practices">Rails Best Practices</a></li>
<li>Chad Pytel / Tammer Saleh : <a href="http://railsantipatterns.com/">Rails Antipattern</a></li>
<li>John Athayde / Bruce Williamsp <a href="http://pragprog.com/book/warv/the-rails-view">The Rails View: Create a Beautiful and Maintainable User Experience</a></li>
<li>Eric Davis <a href="http://www.refactoringredmine.com/">Refacotoring Redmine</a></li>
<li>Code Climate <a href="http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/">7 Patterns to Refactor Fat ActiveRecord Models</a></li>
</ul>


<h2>Writing better Ruby code</h2>

<ul>
<li>Code School <a href="http://www.codeschool.com/courses/ruby-bits">Code Ruby Bits</a></li>
<li>Code School <a href="http://www.codeschool.com/courses/ruby-bits-part-2">Code Ruby Bits Part 2</a></li>
<li>David A. Black <a href="http://www.manning.com/black2/">The Well-Grounded Rubyist</a></li>
<li>Russ Olsen <a href="http://www.amazon.com/Eloquent-Ruby-Addison-Wesley-Professional/dp/0321584104">Eloquent Ruby</a></li>
<li>Avdi Grimm <a href="http://devblog.avdi.org/2012/06/05/confident-ruby-beta/">Confident Ruby</a></li>
<li>Avdi Grimm <a href="http://exceptionalruby.com/">Exceptional Ruby</a></li>
<li>Stefan Kaes <a href="http://www.informit.com/store/writing-efficient-ruby-code-digital-short-cut-9780321540034">Writing Efficient Ruby Code (Digital Short Cut)</a></li>
</ul>


<h3>Podcast / Journal of writing better Ruby/Rails code</h3>

<ul>
<li><a href="http://devblog.avdi.org/rubytapas/">Ruby Tapas</a></li>
<li><a href="https://www.destroyallsoftware.com/screencasts">Destroy All Software</a></li>
<li><a href="https://practicingruby.com/">Practicing Ruby</a></li>
</ul>


<h2>Object-oriend Design in Ruby on Rails</h2>

<ul>
<li>thoughtbot <a href="https://learn.thoughtbot.com/products/13">Ruby Science</a></li>
<li>Avdi Grimm <a href="http://objectsonrails.com/">Object on Rails</a></li>
<li>Russ Olsen <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a></li>
<li>Jay fields <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Refacoting : Ruby Edition</a></li>
<li>Sandi Metz <a href="http://www.amazon.com/dp/0321721330">Practical Object-Oriented Design in Ruby: An Agile Primer</a></li>
</ul>


<h2>Know Rails better</h2>

<ul>
<li>José Valim <a href="http://pragprog.com/book/jvrails/crafting-rails-applications">Crafting Rails Applications: Expert Practices for Everyday Rails Development</a></li>
<li>Marc-André Cournoyer <a href="http://owningrails.com/">Owning Rails: The Rails Online Master Class</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/299-rails-initialization-walkthrough">Rails Initialization Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/319-rails-middleware-walkthrough">Rails Middleware Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/317-rack-app-from-scratch">Rack App from Scratch</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/349-rails-modularity">Rails Modularity</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/355-hacking-with-arel">Hacking with Arel</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/385-authorization-from-scratch-part-1">Authorization from Scratch Part 1</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/386-authorization-from-scratch-part-2">Authorization from Scratch Part 2</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/395-action-controller-walkthrough">Action Controller Walkthrough</a></li>
<li>Railscast <a href="http://railscasts.com/episodes/397-action-view-walkthrough">Action View Walkthrough</a></li>
</ul>


<h2>Guideline of writng Ruby / Rails code</h2>

<ul>
<li><a href="http://www.refactoringredmine.com/">ruby-style-guide</a></li>
<li><a href="https://github.com/bbatsov/rails-style-guide">rails-style-guide</a></li>
<li><a href="https://github.com/hopsoft/rails_standards/tree/rails-3-2">rails_standards</a></li>
<li>thoughtbot <a href="https://github.com/thoughtbot/guides">guides</a></li>
</ul>


<h2>Resources of latest Ruby</h2>

<ul>
<li><a href="http://ruby5.envylabs.com/">Ruby5</a></li>
<li><a href="http://rubyweekly.com/">Ruby Weekly</a></li>
<li><a href="http://www.rubyinside.com/">Ruby Inside</a></li>
<li><a href="http://www.rubyflow.com/">RubyFlow</a></li>
<li><a href="http://rubyrogues.com/">RubyRogues</a></li>
<li><a href="http://learn.thoughtbot.com/podcast">Thoughtbot Podcast</a></li>
<li><a href="http://railscasts.com/">Railscast</a></li>
<li><a href="http://www.confreaks.com/">Confreaks</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012 我的 commit 數據]]></title>
    <link href="http://blog.xdite.net/posts/2013/01/08/2012-commit/"/>
    <updated>2013-01-08T20:04:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2013/01/08/2012-commit</id>
    <content type="html"><![CDATA[<p>Github 今天<a href="https://github.com/blog/1360-introducing-contributions">上了新的 features： Contributions</a> 。</p>

<p>在新的個人頁面可以看到過去一年自己 Commit 的軌跡&#8230;。</p>

<p>看了一下，我公開的 commit 有 923 次。</p>

<p><a href="http://www.flickr.com/photos/xdite/8361383762/" title="2012-public by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8079/8361383762_d03e2a7068_z.jpg" width="640" height="279" alt="2012-public"></a></p>

<p>含 Private repo (公司和自己的 side project)，有 3363 次。</p>

<p><a href="http://www.flickr.com/photos/xdite/8361383756/" title="2012-private by xdite, on Flickr"><img src="http://farm9.staticflickr.com/8465/8361383756_cb712eab89_z.jpg" width="640" height="280" alt="2012-private"></a></p>

<p>另外一些之前整理在 FB 上的數據。2012 年，我：</p>

<ul>
<li>出國了四次</li>
<li>去過了三個國家</li>
<li>給了超過 10 場 talk</li>
<li>完成了五個案子</li>
<li>opensource 了兩個熱門 gem</li>
<li>拿了一個世界大獎</li>
<li>開了一間公司</li>
<li>開發了超過 10 個 Rails porject</li>
<li>寫了超過 60 篇文章</li>
<li>寫作了超過 30 萬字</li>
<li>讀了超過 200 本書&#8230;&#8230;</li>
</ul>


<p>加上去年一整年 commit 的 3300 次。</p>

<p>到底哪來的這麼多時間啊？..orz</p>

<p>結論是，應該要來放個假了嗎？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Book] 耶誕限時折扣]]></title>
    <link href="http://blog.xdite.net/posts/2012/12/24/christmas-books-offer/"/>
    <updated>2012-12-24T16:00:00+08:00</updated>
    <id>http://blog.xdite.net/posts/2012/12/24/christmas-books-offer</id>
    <content type="html"><![CDATA[<p>Essential Rails Design Patterns
<a href="http://rails-101.logdown.com/books/3-essential-rails-pattern">http://rails-101.logdown.com/books/3-essential-rails-pattern</a></p>

<p>限時特價 9.99USD</p>

<p>被大家嫌拖稿很久的本書，終於在 12/22 新增了接近 8 萬字，共 165 頁的內容。</p>

<p>Rails 101
<a href="http://rails-101.logdown.com/books/1-rails-101">http://rails-101.logdown.com/books/1-rails-101</a></p>

<p>限時特價 4.99 USD</p>

<p>（ 籌備 Rails 4.0 版本中 ，到時候會寄出免費更新 ）</p>

<p>特價到 2012/12/31 午夜為止。</p>
]]></content>
  </entry>
  
</feed>
